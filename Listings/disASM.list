
; File #0: C:\Users\Antonio\source\repos\disASM\Z80CodeFiles\disASM.z80asm

8000             0 1 ; **********************************************************************************************************************
8000             0 2 ; **  disASM                                                                                                          **
8000             0 3 ; **                                                                                                                  **
8000             0 4 ; **  Based on Disassembler support from Small Computer Monitor (SCM)                           by Stephen C Cousins  **
8000             0 5 ; **  https://smallcomputercentral.com/small-computer-monitor/small-computer-monitor-v1-0/                            **
8000             0 6 ; **                                                                                                                  **
8000             0 7 ; **  Adapted for ZX Spectrum disASM                                                                by Antonio Luque  **
8000             0 8 ; **********************************************************************************************************************
8000             0 11 START               ORG     $E100
E100             0 13 Main:
E100 21 39 07    0 14 ld      hl, Realloc_Addrs-START     ; HL points to relative address of Realloc_Addrs
E103 09          0 15 add     hl, bc                      ; Move HL to absolute address of reallocation addresses
E104             0 17 ; Avoid 'call Reallocation'

; File #1: C:\Users\Antonio\source\repos\disASM\Z80CodeFiles\Reallocation.z80asm

E104             1 1 ; **********************************************************************************************************************
E104             1 2 ; **  Reallocation                                                                        by HiSoft Devpac, (C) 1983  **
E104             1 3 ; **                                                                                                                  **
E104             1 4 ; **  This piece of code has been disassembled from MONS v4.1 and adapted for disASM by Antonio Luque                 **
E104             1 5 ; **********************************************************************************************************************
E104             1 8 ; Reallocate pointers and calls pointed to by the 'Realloc_X' tags
E104             1 9 ;   On entry: HL = address of reallocation addresses (Realloc_Addrs)
E104             1 10 ;             BC = address of program start
E104             1 11 ;   On exit:  BC IX IY I AF' BC' DE' HL' preserved
E104             1 12 Reallocation:
E104 5E          1 13 ld      e, (hl)                     ; DE = relative reallocation address
E105 23          1 14 inc     hl
E106 56          1 15 ld      d, (hl)
E107 23          1 16 inc     hl                          ; Move HL to next relative reallocation address
E108 7A          1 17 ld      a, d                        ; last address?
E109 B3          1 18 or      e
E10A 28 11       1 19 jr      z, Re_Entry                 ; yes, reallocation finished
E10C EB          1 21 ex      de, hl                      ; HL = relative reallocation address
E10D 09          1 22 add     hl, bc                      ; HL points to address parameter of the instr. at 'Realloc_X'
E10E D5          1 23 push    de                          ; Store next relative reallocation address
E10F E5          1 24 push    hl                          ; Store pointer to address parameter of the instruction
E110 5E          1 25 ld      e, (hl)                     ; Save the content of the address parameter in DE
E111 23          1 26 inc     hl
E112 56          1 27 ld      d, (hl)
E113 EB          1 28 ex      de, hl                      ; Calculate absolute address in HL
E114 09          1 29 add     hl, bc
E115 EB          1 30 ex      de, hl                      ; DE = absolute address parameter of the instruction
E116 E1          1 31 pop     hl                          ; Restore pointer to address parameter of the instruction
E117 73          1 32 ld      (hl), e                     ; Update address parameter of the instruction with calculated
E118 23          1 33 inc     hl                          ;   absolute address
E119 72          1 34 ld      (hl), d
E11A E1          1 35 pop     hl                          ; Restore next relative reallocation address
E11B 18 E7       1 36 jr      Reallocation                ; Repeat again
E11D             1 38 ; From this point on, all address parameters of the instructions pointed to by the 'Realloc_X' tags
E11D             1 39 ;  have been updated with the corresponding absolute address.
E11D             1 41 Re_Entry:
E11D             1 42 ; Put 'JP Init' at the start of program for the re-entry
E11D 3E C3       1 43 ld      a, $C3                      ; 'JP' opcode
E11F 32 00 00    1 44 Realloc_A           ld      ($0000), a                  ; Put it at program start
E122 21 28 00    1 45 Realloc_B           ld      hl, Init-START              ; HL points to Init
E125 22 01 00    1 46 Realloc_C           ld      ($0001), hl                 ; Put Init address as parameter of JP instruction

; File #0: C:\Users\Antonio\source\repos\disASM\Z80CodeFiles\disASM.z80asm

E128             0 20 ; Re-entry of program after first execution
E128             0 21 Init:
E128 21 B0 07    0 22 ld      hl, END-START               ; HL points to relative address of stack address
E12B 09          0 23 add     hl, bc                      ; Move HL to absolute address of stack addresses
E12C F9          0 24 ld      sp, hl                      ; Move stack at bottom of Realloc_Addrs
E12D CD 41 00    0 26 Realloc_1           call    InputAddresses-START        ; Input "from" and "to" addresses from keyboard
E130             0 28 ; Disassembly loop
E130             0 29 DisInstruction:
E130 C5          0 30 push    bc                          ; Store "to"+1 address
E131 D5          0 31 push    de                          ; Store string buffer address
E132 CD 56 02    0 33 Realloc_2           call    DisWrInstruction-START      ; Write fully disassembly instruction in buffer
E135 CD D3 00    0 34 Realloc_3           call    PrintDisassembly-START      ; Print buffer
E138 D1          0 36 pop     de                          ; Restore string buffer address
E139 C1          0 37 pop     bc                          ; Restore "to"+1 address
E13A             0 39 ;and     a                          ; reset carry flag
E13A ED 42       0 40 sbc     hl, bc                      ; check if reach "to"+1 address
E13C 09          0 41 add     hl, bc
E13D 38 F1       0 42 jr      c, DisInstruction           ; loop until reach "to"+1 address
E13F CF          0 44 rst     $08                         ; return to BASIC: "0 OK, "
E140 FF          0 45 DEFB    $FF
E141             0 48 ; Support routines and data

; File #2: C:\Users\Antonio\source\repos\disASM\Z80CodeFiles\IOSupport.z80asm

E141             2 1 ; **********************************************************************************************************************
E141             2 2 ; **  Input/Output support                                                                          by Antonio Luque  **
E141             2 3 ; **********************************************************************************************************************
E141             2 6 ; ROM routines and system variables
E141             2 7 CLS_LOWER           EQU     $0D6E                       ; Clear the lower part of the display
E141             2 8 CL_ALL              EQU     $0DAF                       ; Clear the whole display area
E141             2 9 CHAN_OPEN           EQU     $1601                       ; Open channel subroutine
E141             2 10 PR_STRING           EQU     $203C                       ; Print string
E141             2 11 LAST_K              EQU     $5C08                       ; Last key pressed
E141             2 13 ; Control characters
E141             2 14 CHR_LEFT            EQU     $08                         ; Move cursor backwards
E141             2 15 CHR_DELETE          EQU     $0C                         ; Delete
E141             2 16 CHR_FLASH           EQU     $12                         ; Flash attribute
E141             2 19 ; IOSupport: Input "from" and "to" addresses from keyboard
E141             2 20 ;  On entry: -
E141             2 21 ;  On exit:  HL = Start of instruction to be disassembled ("from")
E141             2 22 ;            BC = End of instrucction to be disassembled ("to"+1)
E141             2 23 ;            DE = Start of string buffer
E141             2 24 ;            IX IY I AF' preserved
E141             2 25 ; Adapted from MONS v4.1 by HiSoft Devpac, (C) 1983
E141             2 26 InputAddresses:
E141 CD 6E 0D    2 27 call    CLS_LOWER                   ; Clear the lower part of the display
E144 FD CB 30 DE 2 28 set     3, (iy+48)                  ; Set CAPS LOCK (FLAGS2 system variable)
E148 11 2F 07    2 30 Realloc_4           ld      de, StrLabels-START         ; DE points to "from" string
E14B 06 02       2 31 ld      b, 2                        ; Number of inputs: "from" and "to" (loop counter)
E14D             2 32 Print_Label:
E14D C5          2 33 push    bc                          ; Store current number of inputs
E14E 01 05 00    2 34 ld      bc, 5                       ; Length of string
E151 CD 3C 20    2 35 call    PR_STRING                   ; Print string
E154 D5          2 36 push    de                          ; Store next string pointer
E155 0C          2 37 inc     c                           ; Set C = 0 (current number of nibbles)
E156             2 38 Get_Address:
E156 3E 12       2 39 ld      a, CHR_FLASH                ; Activate flash attribute
E158 D7          2 40 rst     $10
E159 3E 01       2 41 ld      a, 1
E15B D7          2 42 rst     $10
E15C 3E 43       2 43 ld      a, 'C'                      ; Print 'C3' cursor
E15E D7          2 44 rst     $10
E15F 3E 12       2 45 ld      a, CHR_FLASH                ; Deactivate flash attribute
E161 D7          2 46 rst     $10
E162 AF          2 47 xor     a
E163 D7          2 48 rst     $10
E164 FD CB 01 AE 2 49 res     5, (iy+1)                   ; Set key pressed flag = off
E168             2 50 Wait_Key:
E168 FD CB 01 6E 2 51 bit     5, (iy+1)                   ; Key pressed?
E16C 28 FA       2 52 jr      z, Wait_Key                 ; No, repeat until key pressed
E16E 3E 08       2 53 ld      a, CHR_LEFT                 ; Move cursor left
E170 D7          2 54 rst     $10
E171 3A 08 5C    2 55 ld      a, (LAST_K)                 ; Get ASCII code of key pressed
E174 FE 0C       2 56 cp      CHR_DELETE                  ; Is it Delete?
E176 28 35       2 57 jr      z, Delete                   ; Yes, perform deleting of previous character
E178 FE 30       2 58 cp      '0'                         ; Is it < '0' ?
E17A 38 DA       2 59 jr      c, Get_Address              ; Yes, repeat key input
E17C FE 47       2 60 cp      'G'                         ; Is it >= 'g' ?
E17E 30 D6       2 61 jr      nc, Get_Address             ; Yes, repeat key input
E180 FE 3A       2 62 cp      ':'                         ; Is it < ':' ?
E182 38 04       2 63 jr      c, Input_OK                 ; Yes, perform key input
E184 FE 41       2 64 cp      'A'                         ; Is it < 'a' ?
E186 38 CE       2 65 jr      c, Get_Address              ; Yes, repeat key input
E188             2 67 ; ASCII code is between '0' and '9' or between 'a' and 'f'
E188             2 68 Input_OK:
E188 D7          2 69 rst     $10                         ; Print ASCII code
E189 3A 08 5C    2 70 ld      a, (LAST_K)                 ; Get ASCII code of key pressed in A
E18C D6 30       2 71 sub     '0'                         ; Convert ASCII to decimal number range
E18E FE 0A       2 72 cp      10                          ; Is it in range 0..9 ?
E190 38 02       2 73 jr      c, High_Nibble              ; Yes, perform high nibble
E192 D6 07       2 74 sub     'A'-'0'-10                  ; No, convert to range A..F
E194             2 75 High_Nibble:
E194 0C          2 76 inc     c                           ; Increment current number of nibbles
E195 CB 41       2 77 bit     0, c                        ; Check if number of nibbles is odd or even 
E197 28 05       2 78 jr      z, Low_Nibble               ; If odd, perform low nibble
E199 87          2 79 add     a, a                        ; Multiply number by 16
E19A 87          2 80 add     a, a
E19B 87          2 81 add     a, a
E19C 87          2 82 add     a, a
E19D 47          2 83 ld      b, a                        ; Save high nibble in B
E19E             2 84 Low_Nibble:
E19E B0          2 85 or      b                           ; Bitwise OR with high nibble (get byte)
E19F 47          2 86 ld      b, a                        ; Save byte in B
E1A0 79          2 87 ld      a, c                        ; Get current number of nibbles
E1A1 FE 04       2 88 cp      4                           ; Is it 4 ?
E1A3 28 1F       2 89 jr      z, Next_Address             ; Yes, prepare for next address
E1A5 1F          2 90 rra                                 ; Is it odd ?
E1A6 38 AE       2 91 jr      c, Get_Address              ; Yes, continue with next nibble
E1A8 60          2 92 ld      h, b                        ; Store high byte of address in H
E1A9 06 00       2 93 ld      b, 0                        ; Reset high nibble
E1AB 18 A9       2 94 jr      Get_Address                 ; Continue with next nibble
E1AD             2 95 ; Delete key pressed
E1AD             2 96 Delete:
E1AD 79          2 97 ld      a, c                        ; Get current number of nibbles
E1AE B7          2 98 or      a                           ; Is it = 0 ?
E1AF 28 A5       2 99 jr      z, Get_Address              ; Yes, nothing to delete
E1B1 1F          2 100 rra                                 ; Is it odd ?
E1B2 38 04       2 101 jr      c, Cursor_Left              ; Yes, move cursor left
E1B4 7C          2 102 ld      a, h                        ; If even, recover previous byte from H
E1B5 E6 F0       2 103 and     %11110000                   ;  and store high nibble in B
E1B7 47          2 104 ld      b, a
E1B8             2 105 Cursor_Left:
E1B8 0D          2 106 dec     c                           ; Decrement number of nibbles
E1B9 3E 20       2 107 ld      a, ' '                      ; Print space (delete character)
E1BB D7          2 108 rst     $10
E1BC 3E 08       2 109 ld      a, CHR_LEFT                 ; Move cursor left two times
E1BE D7          2 110 rst     $10
E1BF 3E 08       2 111 ld      a, CHR_LEFT
E1C1 D7          2 112 rst     $10
E1C2 18 92       2 113 jr      Get_Address                 ; Continue with next nibble
E1C4             2 114 ; Store "from" address and prepare input of "to" address
E1C4             2 115 Next_Address:
E1C4 68          2 116 ld      l, b                        ; Store low byte of address in L
E1C5 D9          2 117 exx                                 ; Store address in HL'
E1C6 D1          2 118 pop     de                          ; Restore next string pointer
E1C7 C1          2 119 pop     bc                          ; Restore current number of inputs
E1C8 10 83       2 120 djnz    Print_Label                 ; Repeat for each address
E1CA             2 122 ; The "from" and "to" addresses are in HL and HL' respectively
E1CA D9          2 123 exx                                 ; HL = "to" address, HL' = "from" address
E1CB E5          2 124 push    hl                          ; Store "to" address
E1CC CD AF 0D    2 125 call    CL_ALL                      ; Clear display area
E1CF D9          2 126 exx                                 ; HL = "from" address
E1D0 C1          2 127 pop     bc                          ; Restore "to" address in BC
E1D1 03          2 128 inc     bc                          ; Increment "to" address
E1D2 C9          2 129 ret
E1D3             2 132 ; IOSupport: Print fully disassembly from string buffer
E1D3             2 133 ;  On entry: -
E1D3             2 134 ;  On exit:  HL IX IY I AF' BC' DE' HL' preserved
E1D3             2 135 PrintDisassembly:
E1D3 E5          2 136 push    hl                          ; Store pointer to next instruction to be disassembled
E1D4 3E 02       2 138 ld      a, 2                        ; Set bottom line limit to print (top line = 24)
E1D6 FD BE 4F    2 139 cp      (iy+79)                     ; Compares with current line number (S_POSN+1 system varible)
E1D9 20 25       2 140 jr      nz, Print                   ; If limit not reached then print buffer
E1DB 3D          2 142 dec     a                           ; Open channel #1 (last two lines)
E1DC CD 01 16    2 143 call    CHAN_OPEN
E1DF 11 2A 07    2 144 Realloc_5           ld      de, StrMore-START           ; DE points to "more?" string
E1E2 01 05 00    2 145 ld      bc, 5                       ; BC = length of string
E1E5 CD 3C 20    2 146 call    PR_STRING                   ; Print string
E1E8 FD CB 01 AE 2 147 res     5, (iy+1)                   ; Set key pressed flag = off
E1EC             2 148 Wait_More:
E1EC FD CB 01 6E 2 149 bit     5, (iy+1)                   ; Key pressed?
E1F0 28 FA       2 150 jr      z, Wait_More                ; No, repeat until key pressed
E1F2 3A 08 5C    2 151 ld      a, (LAST_K)                 ; Get ASCII code of key pressed
E1F5 FE 20       2 152 cp      ' '                         ; Is it space?
E1F7 28 16       2 153 jr      z, Break                    ; Yes, return to BASIC
E1F9 FE 6E       2 154 cp      'n'                         ; Is it = 'n' ?
E1FB 28 10       2 155 jr      z, Stop                     ; Yes, return to BASIC
E1FD CD AF 0D    2 156 call    CL_ALL                      ; Clear display area
E200             2 157 Print:
E200 11 39 07    2 158 Realloc_6           ld      de, kStrBuffer-START        ; DE points to string buffer
E203 1A          2 159 ld      a, (de)                     ; Get string length
E204 13          2 160 inc     de                          ; Move DE to first character of the string
E205 06 00       2 161 ld      b, 0                        ; BC = length of the string
E207 4F          2 162 ld      c, a
E208 CD 3C 20    2 163 call    PR_STRING                   ; Print string
E20B E1          2 165 pop     hl                          ; Restore pointer to next instruction to be disassembled
E20C C9          2 166 ret
E20D             2 167 Stop:
E20D CF          2 168 rst     $08                         ; return to BASIC: "9 STOP statement, "
E20E 08          2 169 DEFB    $08
E20F             2 170 Break:
E20F CF          2 171 rst     $08                         ; return to BASIC: "L BREAK into program, "
E210 14          2 172 DEFB    $14

; File #3: C:\Users\Antonio\source\repos\disASM\Z80CodeFiles\Strings.z80asm

E211             3 1 ; **********************************************************************************************************************
E211             3 2 ; **  String support                                                                            by Stephen C Cousins  **
E211             3 3 ; **                                                                                                                  **
E211             3 4 ; **  Adapted for ZX Spectrum disASM                                                                by Antonio Luque  **
E211             3 5 ; **********************************************************************************************************************
E211             3 8 ; String: Write hex word to string buffer
E211             3 9 ;   On entry: DE = Hex word
E211             3 10 ;   On exit:  B DE HL IX IY I AF' BC' DE' HL' preserved
E211             3 11 StrWrHexWord:
E211 7A          3 12 ld      a, d                        ; Get hi byte
E212 CD 16 01    3 13 Realloc_7           call    StrWrHexByte-START          ; Write as two hex digits
E215 7B          3 14 ld      a, e                        ; Get lo byte
E216             3 15 ; String: Write hex byte to string buffer
E216             3 16 ;   On entry: A = Hex byte
E216             3 17 ;   On exit:  B DE HL IX IY I AF' BC' DE' HL' preserved
E216             3 18 StrWrHexByte:
E216 4F          3 19 ld      c, a                        ; Save byte to convert
E217 1F          3 20 rra                                 ; Shift top nibble to
E218 1F          3 21 rra                                 ;  botom four bits..
E219 1F          3 22 rra
E21A 1F          3 23 rra
E21B E6 0F       3 24 and     %00001111                   ; Mask off unwanted bits
E21D CD 23 01    3 25 Realloc_8           call    StrWrHexNibble-START        ; Write top nibble
E220 79          3 26 ld      a, c                        ; Restore byte to convert
E221 E6 0F       3 27 and     %00001111                   ; Mask off unwanted bits
E223             3 28 ; String: Write hex nibble to string buffer
E223             3 29 ;   On entry: A = Hex nibble
E223             3 30 ;   On exit:  BC DE HL IX IY I AF' BC' DE' HL' preserved
E223             3 31 ; https://wikiti.brandonw.net/index.php?title=Z80_Optimization#DAA_trick
E223             3 32 StrWrHexNibble:
E223 FE 0A       3 33 cp      10                          ; if (nibble < 10) then (carry = on)
E225 3F          3 34 ccf                                 ; invert carry
E226 CE 30       3 35 adc     a, '0'                      ; A = nibble + ('0' or '1')
E228 27          3 36 daa                                 ; convert nibble to ASCII
E229             3 37 ; String: Write character
E229             3 38 ;   On entry: A = Character to write to string buffer
E229             3 39 ;   On exit:  BC DE HL IX IY I AF' BC' DE' HL' preserved
E229             3 40 ; The specified character is writted to the string buffer and a null
E229             3 41 ; terminator added.
E229             3 42 StrWrChar:
E229 E5          3 43 push    hl                          ; Store HL register
E22A             3 44 iStrStart:
E22A 21 00 00    3 45 ld      hl, $0000                   ; HL points to current empty position of the string
E22D 77          3 46 ld      (hl), a                     ; Store character at string position
E22E 23          3 47 inc     hl                          ; Move HL to next empty position
E22F 22 2B 01    3 48 Realloc_9           ld      (iStrStart-START+1), hl     ; Update pointer to current empty position
E232 E1          3 49 pop     hl                          ; Restore HL register
E233 C9          3 50 ret

; File #4: C:\Users\Antonio\source\repos\disASM\Z80CodeFiles\DisSupport.z80asm

E234             4 1 ; **********************************************************************************************************************
E234             4 2 ; **  Disassembler support                                                                      by Stephen C Cousins  **
E234             4 3 ; **                                                                                                                  **
E234             4 4 ; **  Adapted for ZX Spectrum disASM                                                                by Antonio Luque  **
E234             4 5 ; **********************************************************************************************************************
E234             4 8 kDisBrack:          EQU     5                           ; Bracket flag
E234             4 9 kDisImmed:          EQU     4                           ; Immediate value flag
E234             4 10 kDisWord:           EQU     3                           ; Immediate value is word (not byte) flag
E234             4 11 kDisLength:         EQU     2                           ; Substite two characters (not one) flag
E234             4 12 kDisMask:           EQU     3                           ; Mask type 0=0x07,1=0x18,2=0x30,3=0x38
E234             4 14 ; Control characters
E234             4 15 CHR_ENTER           EQU     $0D
E234             4 18 ; Disassembler: Write character to string buffer
E234             4 19 ;   On entry: A = Character to write
E234             4 20 ;   On exit:  BC DE HL IX IY I AF' BC' DE' HL' preserved
E234             4 21 ; This version of write character removes bit 7 (the new string flag)
E234             4 22 ; and replaces "-" with "(HL)"
E234             4 23 DisWrChar:
E234 E6 7F       4 24 and     %01111111                   ; Mask off bit 7 (string start bit)
E236 FE 2D       4 25 cp      '-'                         ; Code for "(HL)" ?
E238 20 EF       4 26 jr      nz, StrWrChar               ; No, print character
E23A 3E 15       4 28 ld      a, kDisBracHL               ; String number for "(HL)"
E23C             4 29 ; Write disassembler string
E23C             4 30 ;   On entry: A = Disassembler data string number
E23C             4 31 ;             B = Offset to current opcode from start of instruction
E23C             4 32 ;             IY = Start address for current instruction
E23C             4 33 ;   On exit:  C DE HL IX IY I AF' BC' DE' HL' preserved
E23C             4 34 ;             B is incremented if (IX/IY+d) is substituted
E23C             4 35 ; This version of write string removes bit 7 (the new string flag)
E23C             4 36 ; If iDisTmp1 (the current index instruction opcode) is 0xDD or 0xFD, 
E23C             4 37 ; is not zero then strings are replaced: 
E23C             4 38 ;   HL is replaced with IX or IY
E23C             4 39 ;   (HL) is replaced with (IX + d) or (IY + d) except for JP instruction
E23C             4 40 ;   where is is just replaced by (IX) or (IY)
E23C             4 41 DisWrString:
E23C E5          4 42 push    hl                          ; Store HL register
E23D 6F          4 44 ld      l, a                        ; Store string number
E23E FE 6E       4 45 cp      kDisH                       ; String = H ?
E240 28 0C       4 46 jr      z, Subs                     ; Yes, so go do substitution
E242 FE 71       4 47 cp      kDisL                       ; String = L ?
E244 28 08       4 48 jr      z, Subs                     ; Yes, so go do substitution
E246 FE 15       4 49 cp      kDisBracHL                  ; String = (HL) ?
E248 28 04       4 50 jr      z, Subs                     ; Yes, so go do substitution
E24A FE 18       4 51 cp      kDisHL                      ; String = HL ?
E24C 20 0B       4 52 jr      nz, GotString               ; No, so just write the string
E24E             4 53 ; Substitute IX/IY in HL string or (IX/IY+d) in (HL) string
E24E             4 54 Subs:
E24E             4 55 iDisIndex:
E24E 3E 00       4 56 ld      a, $00                      ; Get index instruction opcode
E250 B7          4 57 or      a                           ; Index instruction?
E251 28 06       4 58 jr      z, GotString                ; No, so skip substitutions
E253 2C          4 59 inc     l                           ; Increment to IX string number
E254 FE DD       4 60 cp      $DD                         ; IX instruction?
E256 28 01       4 61 jr      z, GotString                ; Yes, so go write it
E258 2C          4 62 inc     l                           ; Increment to IY string
E259             4 63 GotString:
E259 7D          4 64 ld      a, l                        ; Get string number
E25A CD 5F 03    4 65 Realloc_10          call    FindStringInList-START      ; Find start of string A
E25D             4 67 ; HL now points to disassembler string
E25D             4 68 Char:
E25D 7E          4 69 ld      a, (hl)                     ; Get character from string
E25E E6 7F       4 70 and     %01111111                   ; Mask off string start bit
E260 FE 2B       4 71 cp      '+'                         ; Is it a '+' sign (displacement) ?
E262 28 05       4 72 jr      z, Plus                     ; No, so skip to next character
E264 CD 29 01    4 73 Realloc_11          call    StrWrChar-START             ; Write character
E267 18 30       4 74 jr      Next                        ; No, so skip to next character
E269             4 75 ; Encountered a plus sign so expecting to show a displacement
E269             4 76 Plus:
E269             4 77 iDisOpStr:
E269 3E 00       4 78 ld      a, $00                      ; Get instruction string
E26B FE 1E       4 79 cp      kDisJP                      ; JP instruction?
E26D 20 07       4 80 jr      nz, Displace                ; No, so go show displacement
E26F 3E 29       4 81 ld      a, ')'                      ; Yes, so just terminate with ')'
E271 CD 29 01    4 82 Realloc_12          call    StrWrChar-START             ; Write close bracket character
E274 18 28       4 83 jr      Exit
E276             4 84 ; Show displacement in (IX+...) and (IY+...) instructions
E276             4 85 Displace:
E276 FD 7E 02    4 86 ld      a, (iy+2)                   ; Get index instruction displacement
E279 FE 80       4 87 cp      $80                         ; Is it signed?
E27B 30 05       4 88 jr      nc, Signed                  ; Yes, negate index instruction displacement
E27D 08          4 89 ex      af, af'                     ; Store unsigned index instruction displacement
E27E 3E 2B       4 90 ld      a, '+'                      ; set '+' for unsigned
E280 18 05       4 91 jr      Convert
E282             4 92 Signed:
E282 ED 44       4 93 neg                                 ; Negate index instruction displacement
E284 08          4 94 ex      af, af'                     ; Store signed index instruction displacement
E285 3E 2D       4 95 ld      a, '-'                      ; set '-' for signed
E287             4 96 Convert:
E287 CD 29 01    4 97 Realloc_13          call    StrWrChar-START             ; Write plus or minus
E28A 3E 24       4 98 ld      a, '$'                      ; Write '$'
E28C CD 29 01    4 99 Realloc_14          call    StrWrChar-START
E28F 08          4 100 ex      af, af'                     ; Restore index instruction displacement
E290 CD 16 01    4 101 Realloc_15          call    StrWrHexByte-START          ; Write index instruction displacement
E293 3E 29       4 102 ld      a, ')'
E295 CD 29 01    4 103 Realloc_16          call    StrWrChar-START             ; Write close bracket character
E298 04          4 104 inc     b                           ; Increment opcode offset
E299             4 105 ; Consider next character in disassembler string
E299             4 106 Next:
E299 23          4 107 inc     hl                          ; Point to next character
E29A CB 7E       4 108 bit     7, (hl)                     ; Start of new string?
E29C 28 BF       4 109 jr      z, Char                     ; No, so go get next character
E29E             4 110 Exit:
E29E E1          4 111 pop     hl                          ; Restore HL register
E29F C9          4 112 ret
E2A0             4 115 ; Disassembler: Write operand to buffer
E2A0             4 116 ;   On entry: A = Operand string number
E2A0             4 117 ;             B = Offset to opcode from start of instruction
E2A0             4 118 ;             C = Primary op-code
E2A0             4 119 ;             IY = Start address of instruction
E2A0             4 120 ;   On exit:  A = Unspecified
E2A0             4 121 ;             B = Updated offset to opcode from start of instruction
E2A0             4 122 ;             C = Not specified
E2A0             4 123 ;             DE HL IX IY I AF' BC' DE' HL' preserved
E2A0             4 124 DisWrOperand:
E2A0 E6 3F       4 125 and     kDisOpMask                  ; Mask off flag bits
E2A2 FE 0E       4 126 cp      kDisSubsL+1                 ; Substitution operand string?
E2A4 30 96       4 127 jr      nc, DisWrString             ; No, so just write string
E2A6 E5          4 129 push    hl                          ; Store registers
E2A7 D5          4 130 push    de
E2A8             4 132 ; Calculate operand table location for this operand and get details
E2A8 21 0A 07    4 133 Realloc_17          ld      hl, DisOperandTable-START-2 ; HL points to DisOperandTable address (-2)
E2AB 87          4 134 add     a, a                        ; Two bytes per entry
E2AC 16 00       4 135 ld      d, 0                        ; Move HL to operand address
E2AE 5F          4 136 ld      e, a
E2AF 19          4 137 add     hl, de
E2B0 5E          4 138 ld      e, (hl)                     ; Get substitution string number
E2B1 23          4 139 inc     hl                          ; Point to BIILMM bits
E2B2 56          4 140 ld      d, (hl)                     ; Get BIILMM function bits
E2B3 D5          4 142 push    de                          ; So we can use E for scratch reg
E2B4             4 143 ; Process this operand as detailed in DE, left bracket?
E2B4 CB 6A       4 144 bit     kDisBrack, d                ; Bracket flagged?
E2B6 28 05       4 145 jr      z, NoBracL                  ; No, so skip
E2B8 3E 28       4 146 ld      a, '('                      ; Get left bracket character
E2BA CD 29 01    4 147 Realloc_18          call    StrWrChar-START             ; Print left bracket
E2BD             4 148 NoBracL:
E2BD             4 149 ; Process this operand as detailed in DE, immediate value?
E2BD CB 62       4 150 bit     kDisImmed, d                ; Immediate value flagged?
E2BF 28 1E       4 151 jr      z, NoImmedia                ; No, so skip
E2C1 3E 24       4 152 ld      a, '$'
E2C3 CD 29 01    4 153 Realloc_19          call    StrWrChar-START             ; Write '$'
E2C6 04          4 154 inc     b                           ; Increment offset to lo byte
E2C7 78          4 155 ld      a, b                        ; Offset to instruction byte
E2C8 CD 50 03    4 156 Realloc_20          call    DisGetOpcode-START          ; Get lo byte of immediate value
E2CB 32 2D 03    4 157 Realloc_21          ld      (iDisImmed-START+1), a      ; Store lo byte of immediate value
E2CE 5F          4 158 ld      e, a                        ; Store lo byte of immediate value
E2CF CB 5A       4 159 bit     kDisWord, d                 ; Immediate value is a word?
E2D1 28 08       4 160 jr      z, ImmedLo                  ; No, so skip
E2D3 04          4 161 inc     b                           ; Increment offset to hi byte
E2D4 78          4 162 ld      a, b                        ; Offset to instruction byte
E2D5 CD 50 03    4 163 Realloc_22          call    DisGetOpcode-START          ; Get hi byte of immediate value
E2D8 CD 16 01    4 164 Realloc_23          call    StrWrHexByte-START          ; Print hi byte of immediate value
E2DB             4 165 ImmedLo:
E2DB 7B          4 166 ld      a, e                        ; Restore lo byte of immediate value
E2DC CD 16 01    4 167 Realloc_24          call    StrWrHexByte-START          ; Print lo byte of immediate value
E2DF             4 168 NoImmedia:
E2DF             4 169 ; Process this operand as detailed in DE, right bracket?
E2DF CB 6A       4 170 bit     kDisBrack, d                ; Bracket flagged?
E2E1 28 05       4 171 jr      z, NoBracR                  ; No, so skip
E2E3 3E 29       4 172 ld      a, ')'                      ; Get right bracket character
E2E5 CD 29 01    4 173 Realloc_25          call    StrWrChar-START             ; Print right bracket
E2E8             4 174 NoBracR:
E2E8             4 175 ; Process this operand as detailed in DE, substitution string?
E2E8 D1          4 176 pop     de                          ; Restore details
E2E9 7B          4 178 ld      a, e                        ; Get substitution string number
E2EA B7          4 179 or      a                           ; String specified?
E2EB 28 66       4 180 jr      z, SubEnd                   ; No, so skip
E2ED 7A          4 181 ld      a, d                        ; Get BIILMM function bits
E2EE E6 03       4 182 and     kDisMask                    ; Separate mask type bits
E2F0 21 26 07    4 183 Realloc_26          ld      hl, DisMaskTable-START      ; Point to table of mask bits
E2F3 85          4 184 add     a, l                        ; Add to start of table
E2F4 6F          4 185 ld      l, a                        ; Store updated lo byte
E2F5 30 01       4 186 jr      nc, NoOFlow                 ; Skip if no overflow
E2F7 24          4 187 inc     h                           ; Overflow so increment hi byte
E2F8             4 188 NoOFlow:
E2F8 7E          4 189 ld      a, (hl)                     ; Get bit mask
E2F9 A1          4 190 and     c                           ; Mask primary opcode
E2FA 4F          4 191 ld      c, a                        ; Store masked primary opcode
E2FB 7E          4 192 ld      a, (hl)                     ; Get bit mask
E2FC             4 193 ; Now shift primary opcode (masked) to right the number of
E2FC             4 194 ; times it takes to shift mask byte right before bit 1 is set
E2FC             4 195 SubsShift:
E2FC CB 3F       4 196 srl     a                           ; Shift mask right
E2FE 38 04       4 197 jr      c, DoneShift                ; Bit 1 was set so we're done
E300 CB 39       4 198 srl     c                           ; Shift primary opcode (masked) right
E302 18 F8       4 199 jr      SubsShift                   ; Go repeat..
E304             4 200 DoneShift:
E304 CB 52       4 201 bit     kDisLength, d               ; Length bit flagged?
E306 28 02       4 202 jr      z, Single                   ; No, so skip
E308 CB 21       4 203 sla     c                           ; Double value for two bytes
E30A             4 204 ; C is now the offset into the substitute string
E30A             4 205 Single:
E30A 7B          4 206 ld      a, e                        ; Substitute string number
E30B 21 6D 03    4 207 Realloc_27          ld      hl, DisString-START         ; Start of string list
E30E CD 5F 03    4 208 Realloc_28          call    FindStringInList-START      ; Get start of string (=HL)
E311 79          4 209 ld      a, c                        ; Offset into string
E312 85          4 210 add     a, l                        ; Add to start of string
E313 6F          4 211 ld      l, a                        ; Store updated lo byte
E314 30 01       4 212 jr      nc, NoOver                  ; Skip if no overflow
E316 24          4 213 inc     h                           ; Overflow so increment hi byte
E317             4 214 NoOver:
E317 7E          4 215 ld      a, (hl)                     ; Get substitute character
E318 4F          4 216 ld      c, a                        ; Save it for further use
E319 FE 2A       4 217 cp      '*'                         ; Code for 2 byte HL/IX/IY string
E31B 3E 18       4 218 ld      a, kDisHL                   ; Set operation string 'HL'
E31D 28 20       4 219 jr      z, Substitute               ; If 2 byte, go to substitutions
E31F             4 220 iDisOpcode:
E31F 3E 00       4 221 ld      a, $00                      ; Get primary opcode
E321             4 222 ; Check undocumented opcodes related to IXH, IXL, IYH and IYL (by Antonio Luque)
E321 FE 74       4 223 cp      $74                         ; opcode = "ld (ix/iy +d),h" ?
E323 28 1F       4 224 jr      z, NotStar                  ; Yes, skip
E325 FE 75       4 225 cp      $75                         ; opcode = "ld (ix/iy +d),l" ?
E327 28 1B       4 226 jr      z, NotStar                  ; Yes, skip
E329 FE 66       4 227 cp      $66                         ; opcode = "ld h,(ix/iy +d)" ?
E32B 28 17       4 228 jr      z, NotStar                  ; Yes, skip
E32D FE 6E       4 229 cp      $6E                         ; opcode = "ld l,(ix/iy +d)" ?
E32F 28 13       4 230 jr      z, NotStar                  ; Yes, skip
E331 79          4 231 ld      a, c                        ; Retreive substitute character
E332 FE 48       4 232 cp      'H'                         ; Is it 'H' ?
E334 3E 6E       4 233 ld      a, kDisH                    ; Set operation string 'H' 
E336 28 07       4 234 jr      z, Substitute               ; If 'H', go to substitutions
E338 79          4 235 ld      a, c                        ; Retreive substitute character
E339 FE 4C       4 236 cp      'L'                         ; Is it 'L' ?
E33B 3E 71       4 237 ld      a, kDisL                    ; Set operation string 'L' 
E33D 20 05       4 238 jr      nz, NotStar                 ; If Not 'L', skip
E33F             4 239 Substitute:
E33F CD 3C 01    4 240 Realloc_29          call    DisWrString-START           ; Print string with substitutions
E342 18 0F       4 241 jr      SubEnd                      ; exit
E344             4 242 NotStar:
E344 79          4 243 ld      a, c                        ; Retreive substitute character 
E345 CD 34 01    4 244 Realloc_30          call    DisWrChar-START             ; Print character with filters
E348 CB 52       4 245 bit     kDisLength, d               ; Length bit flagged?
E34A 28 07       4 246 jr      z, SubEnd                   ; No, so skip
E34C 23          4 247 inc     hl                          ; Point to second substitute character
E34D 7E          4 248 ld      a, (hl)                     ; Get substitute character
E34E FE 2E       4 249 cp      '.'                         ; Do not print '.' character
E350 C4 34 01    4 250 Realloc_31          call    nz, DisWrChar-START         ; Print character with filters
E353             4 251 SubEnd:
E353 D1          4 252 pop     de                          ; Restore registers
E354 E1          4 253 pop     hl
E355 C9          4 254 ret
E356             4 257 ; Disassembler: Write full disassembly to string buffer
E356             4 258 ;   On entry: HL = Start of instruction to be disassembled
E356             4 259 ;             DE = String buffer address
E356             4 260 ;   On exit:  Address, opcodes and mnemonic in current string buffer
E356             4 261 ;             iDisIndex variable used
E356             4 262 ;             A = Length of instruction in bytes
E356             4 263 ;             HL = Start address of next instruction
E356             4 264 ;             IY I AF' BC' DE' HL' preserved
E356             4 265 DisWrInstruction:
E356 E5          4 266 push    hl                          ; Store start of instruction to be disassembled
E357             4 268 ; Fill string buffer for address and opcodes with spaces
E357 06 10       4 269 ld      b, 16                       ; B = buffer length (loop counter)
E359 13          4 270 inc     de                          ; Move DE to string buffer
E35A 3E 20       4 271 ld      a, ' '                      ; Set space character
E35C             4 272 SpcLoop
E35C 12          4 273 ld      (de), a                     ; Put a space on the string buffer
E35D 13          4 274 inc     de                          ; Move DE to next position of the string buffer
E35E 10 FC       4 275 djnz    SpcLoop                     ; Loop until fill all buffer positions
E360 DD 21 E1 04 4 277 Realloc_32          ld      ix, DisInst-START           ; Start of instruction table
E364 ED 53 2B 01 4 278 Realloc_33          ld      (iStrStart-START+1), de     ; Initialise string for mnemonic
E368 CD 93 02    4 279 Realloc_34          call    DisWrMnemonic-START         ; Disassembly Mnemonic pointed by HL
E36B             4 281 ; Add disassembly address and opcodes
E36B 47          4 282 ld      b, a                        ; B = intruction length (loop counter)
E36C 11 39 07    4 284 Realloc_35          ld      de, kStrBuffer-START        ; DE points to the string for opcodes
E36F 2A 2B 01    4 285 Realloc_36          ld      hl, (iStrStart-START+1)     ; HL points to last character+1 of string for Nnemonic
E372             4 286 ;and     a                          ; Reset carry
E372 ED 52       4 287 sbc     hl, de                      ; Calculate length of total string (+1)
E374 EB          4 288 ex      de, hl                      ; E = length of total string (+1), move HL to string for opcodes
E375 73          4 289 ld      (hl), e                     ; Save length at begin of string
E376 35          4 290 dec     (hl)                        ; Adjust string length
E377 23          4 291 inc     hl                          ; Move DE to the first character of the string
E378 22 2B 01    4 292 Realloc_37          ld      (iStrStart-START+1), hl     ; Initialise string for opcodes
E37B E1          4 294 pop     hl                          ; Restore current instruction address
E37C 54          4 296 ld      d, h                        ; Get start of instruction..
E37D 5D          4 297 ld      e, l
E37E CD 11 01    4 298 Realloc_38          call    StrWrHexWord-START          ; Write start address of this line
E381 3E 3A       4 299 ld      a, ':'
E383 CD 29 01    4 300 Realloc_39          call    StrWrChar-START             ; Write colon
E386 3E 20       4 301 ld      a, ' '
E388 CD 29 01    4 302 Realloc_40          call    StrWrChar-START             ; Write space
E38B             4 304 Opcode:
E38B 7E          4 305 ld      a, (hl)                     ; Get instruction opcode
E38C CD 16 01    4 306 Realloc_41          call    StrWrHexByte-START          ; Write as hex byte
E38F 23          4 307 inc     hl                          ; Point to next byte 
E390 10 F9       4 308 djnz    Opcode                      ; Loop until all hex bytes written
E392 C9          4 309 ret
E393             4 312 ; Disassembler: Write mnemonic only to string buffer
E393             4 313 ;   On entry: HL = Start of instruction to be disassembled
E393             4 314 ;   On exit:  Mnemonic is written to current string buffer
E393             4 315 ;             iDisIndex variable used
E393             4 316 ;             A = Length of instruction in bytes
E393             4 317 ;             IY I AF' BC' DE' HL' preserved
E393             4 318 DisWrMnemonic:
E393 F3          4 319 di                                  ; Disable interrupts to prevent use of IY register
E394 FD E5       4 320 push    iy                          ; Store system variables pointer
E396             4 322 ; Prepare to disassemble 
E396 E5          4 323 push    hl                          ; Copy start address of instruction
E397 FD E1       4 324 pop     iy                          ;  to IY
E399 AF          4 326 xor     a
E39A 21 4F 01    4 327 Realloc_42          ld      hl, iDisIndex-START+1       ; Clear index instruction opcode
E39D 77          4 328 ld      (hl), a
E39E 47          4 329 ld      b, a                        ; Offset to instruction's primary opcode
E39F 5F          4 330 ld      e, a                        ; Clear prefix for extended instructions
E3A0 FD 7E 00    4 331 ld      a, (iy+0)                   ; Instruction's primary opcode 
E3A3             4 333 ; Check for index register instruction (IX or IY)
E3A3 FE DD       4 334 cp      $DD                         ; IX instruction?
E3A5 28 04       4 335 jr      z, Index                    ; Yes, so skip
E3A7 FE FD       4 336 cp      $FD                         ; IY instruction?
E3A9 20 05       4 337 jr      nz, NotIndex                ; No, so skip
E3AB             4 338 Index:
E3AB 77          4 339 ld      (hl), a                     ; Store index instruction opcode
E3AC 04          4 340 inc     b                           ; Increment offset to primary opcode
E3AD FD 7E 01    4 341 ld      a, (iy+1)                   ; Get next opcode byte
E3B0             4 342 NotIndex:
E3B0             4 343 ; Check for extended instruction
E3B0 FE CB       4 344 cp      $CB                         ; Extended instruction?
E3B2 28 04       4 345 jr      z, Extend                   ; Yes, so skip
E3B4 FE ED       4 346 cp      $ED                         ; Extended instruction?
E3B6 20 0B       4 347 jr      nz, NotExtend               ; No, so skip
E3B8             4 348 Extend:
E3B8 5F          4 349 ld      e, a                        ; Store prefix for extended instructions
E3B9 04          4 350 inc     b                           ; Increment offset to primary opcode
E3BA 7E          4 351 ld      a, (hl)                     ; Get index instruction opcode
E3BB B7          4 352 or      a                           ; Is this an index instruction?
E3BC 78          4 353 ld      a, b                        ; Prepare to read primary opcode
E3BD 28 01       4 354 jr      z, ExNoIndx                 ; No, so skip
E3BF 3C          4 355 inc     a                           ; Yes, skip index displacement byte
E3C0             4 356 ExNoIndx:
E3C0 CD 50 03    4 357 Realloc_43          call    DisGetOpcode-START
E3C3             4 358 NotExtend:
E3C3 57          4 359 ld      d, a                        ; Remember instruction's primary opcode
E3C4 32 20 02    4 360 Realloc_44          ld      (iDisOpcode-START+1), a     ; Store primary opcode
E3C7             4 362 ; Locate instruction table entry for current instruction
E3C7             4 363 ; BASIC: (i And iMask(n)) = (iValue(n) And iMask(n)) ?
E3C7             4 364 Table:
E3C7 DD 7E 00    4 365 ld      a, (ix+0)                   ; Get opcode value from table
E3CA DD A6 01    4 366 and     (ix+1)                      ; AND with opcode mask from table
E3CD 4F          4 367 ld      c, a                        ; Store Value AND Mask
E3CE DD 7E 01    4 368 ld      a, (ix+1)                   ; Get opcode mask from table
E3D1 A2          4 369 and     d                           ; AND with instruction being disassembled
E3D2 B9          4 370 cp      c                           ; Is this the correct table entry?
E3D3 20 14       4 371 jr      nz, NotFound                ; No, so this is not the correct table
E3D5             4 372 ; BASIC: ... AND (p = iPrecode(n)) ?
E3D5 AF          4 373 xor     a                           ; Default precode for comparison = 0x00
E3D6 DD CB 03 7E 4 374 bit     7, (ix+3)                   ; Precode (index or extended)?
E3DA 28 0A       4 375 jr      z, GotPrCode                ; No, so skip
E3DC 3E CB       4 376 ld      a, $CB                      ; Default precode for comparison = 0xCB
E3DE DD CB 03 76 4 377 bit     6, (ix+3)                   ; Precode = 0xED?
E3E2 28 02       4 378 jr      z, GotPrCode                ; No, so skip
E3E4 3E ED       4 379 ld      a, $ED                      ; Yes, so precode for comparison = 0xED
E3E6             4 380 GotPrCode:
E3E6 BB          4 381 cp      e                           ; Compare table precode with instruction
E3E7 28 09       4 382 jr      z, Found                    ; Yes, so this is the correct table
E3E9             4 383 NotFound:
E3E9 C5          4 384 push    bc                          ; Preserve BC
E3EA 01 05 00    4 385 ld      bc, 5                       ; No, so try next table entry
E3ED DD 09       4 386 add     ix, bc                      ; Point to next table entry
E3EF C1          4 387 pop     bc                          ; Restore BC
E3F0 18 D5       4 388 jr      Table
E3F2             4 390 ; We now have the correct instruction table entry (pointer to by IX)
E3F2             4 391 ; BASIC: (p = iPrecode(n)) And (i And iMask(n)) = (iValue(n) And iMask(n))
E3F2             4 392 Found:
E3F2 DD 7E 02    4 393 ld      a, (ix+2)                   ; Get operation string number
E3F5 21 6A 01    4 394 Realloc_45          ld      hl, iDisOpStr-START+1       ; Store operation string number
E3F8 77          4 395 ld      (hl), a
E3F9 CD 3C 01    4 396 Realloc_46          call    DisWrString-START           ; Write operation string
E3FC 3E 20       4 398 ld      a, ' '                      ; Write space
E3FE CD 29 01    4 399 Realloc_47          call    StrWrChar-START
E401             4 401 ; BASIC: Operand sString(iOperand1(n)), t
E401 DD 7E 03    4 402 ld      a, (ix+3)                   ; Get operand #1 string number
E404 4A          4 403 ld      c, d                        ; Get primary opcode value
E405 CD A0 01    4 404 Realloc_48          call    DisWrOperand-START
E408             4 406 ; BASIC: Operand sString(iOperand2(n)), t
E408 DD 7E 04    4 407 ld      a, (ix+4)                   ; Get operand #2 string number
E40B 3D          4 408 dec     a                           ; Is is 1? (null string)
E40C 28 0C       4 409 jr      z, NoOp2                    ; Yes, so skip this operand
E40E 3E 2C       4 411 ld      a, ','                      ; Get comma character
E410 CD 29 01    4 412 Realloc_49          call    StrWrChar-START             ; Write comma to string
E413 DD 7E 04    4 414 ld      a, (ix+4)                   ; Get operand #2 string number
E416 4A          4 415 ld      c, d                        ; Get primary opcode value
E417 CD A0 01    4 416 Realloc_50          call    DisWrOperand-START
E41A             4 417 NoOp2:
E41A             4 418 ; If relative jump show absolute address in brackets
E41A 7E          4 419 ld      a, (hl)                     ; Get operation string number
E41B FE 1B       4 420 cp      kDisJR                      ; JR instruction?
E41D 28 04       4 421 jr      z, Rel                      ; Yes, so skip
E41F FE 1C       4 422 cp      kDisDJNZ                    ; DJNZ instruction?
E421 20 22       4 423 jr      nz, NotRel                  ; No so skip
E423             4 424 Rel:
E423 2A 2B 01    4 425 Realloc_51          ld      hl, (iStrStart+1-START)     ; An ugly way to only show absolute address
E426 2B          4 426 dec     hl                          ;  (by Antonio Luque)
E427 2B          4 427 dec     hl
E428 2B          4 428 dec     hl
E429 22 2B 01    4 429 Realloc_52          ld      (iStrStart-START+1), hl
E42C             4 430 iDisImmed:
E42C 3E 00       4 431 ld      a, $00                      ; Get immediate value from instruction
E42E 5F          4 432 ld      e, a                        ; Get displacement lo (signed byte)
E42F 16 00       4 433 ld      d, 0                        ; Default to hi byte = zero
E431 17          4 434 rla                                 ; Displacement negative?
E432 30 01       4 435 jr      nc, JRadd                   ; No, so skip
E434 15          4 436 dec     d                           ; Yes, so set hi byte to 0xFF
E435             4 437 JRadd:
E435 FD E5       4 438 push    iy                          ; Push address of instruction
E437 E1          4 439 pop     hl                          ; POP address of instruction
E438 23          4 440 inc     hl                          ; Increment to
E439 23          4 441 inc     hl                          ;  end of the JR/DJNZ instruction
E43A 19          4 442 add     hl, de                      ; Add signed 16-bit displacement
E43B 54          4 443 ld      d, h                        ; Get destination address hi byte
E43C 5D          4 444 ld      e, l                        ; Get destination address lo byte
E43D 3E 24       4 446 ld      a, '$'
E43F CD 29 01    4 447 Realloc_53          call    StrWrChar-START             ; Write '$'
E442 CD 11 01    4 448 Realloc_54          call    StrWrHexWord-START          ; Write hex word to string
E445             4 450 NotRel:
E445             4 451 ; Finish building mnemonic string
E445 3E 0D       4 452 ld      a, CHR_ENTER
E447 CD 29 01    4 453 Realloc_55          call    StrWrChar-START
E44A 78          4 455 ld      a, b                        ; Get offset into instruction
E44B 3C          4 456 inc     a                           ; Increment to give instruction length
E44C FD E1       4 458 pop     iy                          ; Restore system variables pointer
E44E FB          4 459 ei                                  ; Enable interrupts
E44F C9          4 460 ret
E450             4 463 ; Disassembler: Get instruction opcode
E450             4 464 ;   On entry: A = Offset from start of instruction
E450             4 465 ;             IY = Start of instruction
E450             4 466 ;   On exit:  A = Opcode
E450             4 467 ;             BC DE HL IX IY I AF' BC' DE' HL' preserved
E450             4 468 DisGetOpcode:
E450 C5          4 469 push    bc                          ; Store registers
E451 FD E5       4 470 push    iy
E453 4F          4 471 ld      c, a                        ; Offset from start of instruction
E454 06 00       4 472 ld      b, 0                        ; Clear hi byte ready for addition
E456 FD 09       4 473 add     iy, bc                      ; Calculate location of opcode
E458 FD 7E 00    4 474 ld      a, (iy+0)                   ; Get opcode from memory
E45B FD E1       4 475 pop     iy                          ; Restore registers
E45D C1          4 476 pop     bc
E45E C9          4 477 ret
E45F             4 479 ; Disassembler: How it works...
E45F             4 480 ; Solution is to use data table to define functions for each operand (see below)
E45F             4 481 ; Decoding table: where the table entry is determined by the operand string number
E45F             4 482 ; String numbers 0 to 12:
E45F             4 483 ;   If bracket flagged print "("
E45F             4 484 ;   If immediate byte flagged print hex byte at PC+Offset+1, Offset += 1
E45F             4 485 ;   If immediate word flagged print word byte at PC+Offset+1 and PC+Offset+2, Offset += 2
E45F             4 486 ;   If bracket flagged print ")"
E45F             4 487 ;   If substitution string specified: (non-zero value)
E45F             4 488 ;     n = opcode and SubsMask
E45F             4 489 ;     n = n >> x, where x is the number of right shifts of the mask til bit 0 is a 1
E45F             4 490 ;     If subsLen is 2 then n = n << 1
E45F             4 491 ;     c =  character at (start of Substitution String + n + 0)
E45F             4 492 ;     if = "-" then print "(HL)" else print character c
E45F             4 493 ;     If SubsLen = 2 then
E45F             4 494 ;       print character at (start of Substitution String + n + 1)
E45F             4 495 ;     Endif
E45F             4 496 ;   End if

; File #5: C:\Users\Antonio\source\repos\disASM\Z80CodeFiles\Utilities.z80asm

E45F             5 1 ; **********************************************************************************************************************
E45F             5 2 ; **  Utility functions                                                                         by Stephen C Cousins  **
E45F             5 3 ; **********************************************************************************************************************
E45F             5 6 ; Utility: Find start of specified string in bit 7 delimited list
E45F             5 7 ;   On entry: A = String number
E45F             5 8 ;   On exit:  HL = Start of string
E45F             5 9 ;             BC DE IX IY I AF' BC' DE' HL' preserved
E45F             5 10 ; Find string A in bit 7 delimited string list
E45F             5 11 FindStringInList:
E45F C5          5 12 push    bc
E460 21 6C 03    5 14 Realloc_56          ld      hl, DisString-START-1       ; Start of string list
E463 47          5 15 ld      b, a                        ; Get string number
E464             5 16 NextChar:
E464 23          5 17 inc     hl                          ; Point to next character
E465 CB 7E       5 18 bit     7, (hl)                     ; Start of new string?
E467 28 FB       5 19 jr      z, NextChar                 ; No, so go get next character
E469 10 F9       5 20 djnz    NextChar                    ; Loop back if not the right string
E46B C1          5 22 pop     bc
E46C C9          5 23 ret

; File #6: C:\Users\Antonio\source\repos\disASM\Z80CodeFiles\DisData.z80asm

E46D             6 1 ; **********************************************************************************************************************
E46D             6 2 ; **  Disassembler data                                                                         by Stephen C Cousins  **
E46D             6 3 ; **********************************************************************************************************************
E46D             6 6 kDisSubsL:          EQU     $0D                         ; Last operand substitution string
E46D             6 7 kDisBracHL:         EQU     $15                         ; Bracketed HL
E46D             6 8 kDisHL:             EQU     $18                         ; Operation string 'HL'
E46D             6 9 kDisJR:             EQU     $1B                         ; Operation string 'JR'
E46D             6 10 kDisDJNZ:           EQU     $1C                         ; Operation string 'DJNZ'
E46D             6 11 kDisJP:             EQU     $1E                         ; Operation string 'JP'
E46D             6 12 kDisH               EQU     $6E                         ; Operation string 'H'
E46D             6 13 kDisL               EQU     $71                         ; Operation string 'L'
E46D             6 14 kDisOpMask:         EQU     $3F                         ; Operand 1 mask to exclude pre-code bits
E46D             6 17 ; Disassembler string table: (DisString)
E46D             6 18 ; This contains many string which are not null terminated and have no length 
E46D             6 19 ; value. Instead they are tightly packed with the start of each string 
E46D             6 20 ; indicated by the first character having bit 7 set.
E46D             6 21 DisString:
E46D 80          6 22 DEFB    $80                         ; String $01 = 
E46E EE          6 23 DEFB    $80+'n'                     ; String $02 = n
E46F A8          6 24 DEFB    $80+'('
E470 6E 29       6 25 DEFM    "n)"                        ; String $03 = (n)
E472 EE 6E       6 26 DEFB    $80+'n','n'                 ; String $04 = nn
E474 A8          6 27 DEFB    $80+'('
E475 6E 6E 29    6 28 DEFM    "nn)"                       ; String $05 = (nn)
E478 F2          6 29 DEFB    $80+'r'                     ; String $06 = r
E479 F2 32       6 30 DEFB    $80+'r','2'                 ; String $07 = r2
E47B E4 64       6 31 DEFB    $80+'d','d'                 ; String $08 = dd
E47D F1 71       6 32 DEFB    $80+'q','q'                 ; String $09 = qq
E47F E3          6 33 DEFB    $80+'c'                     ; String $0A = c
E480 E3 63       6 34 DEFB    $80+'c','c'                 ; String $0B = cc
E482 F4          6 35 DEFB    $80+'t'                     ; String $0C = t
E483 E2          6 36 DEFB    $80+'b'                     ; String $0D = b
E484 C2          6 37 DEFB    $80+'B'
E485 43 44 45 48 6 38 DEFM    "CDEHL-A"                   ; String $0E = BCDEHL-A
E489 4C 2D 41    6 38 
E48C C2          6 39 DEFB    $80+'B'
E48D 43 44 45 2A 6 40 DEFM    "CDE**SP"                   ; String $0F = BCDE**SP
E491 2A 53 50    6 40 
E494 C2          6 41 DEFB    $80+'B'
E495 43 44 45 2A 6 42 DEFM    "CDE**AF"                   ; String $10 = BCDE**AF
E499 2A 41 46    6 42 
E49C CE          6 43 DEFB    $80+'N'
E49D 5A 5A 2E 4E 6 44 DEFM    "ZZ.NCC."                   ; String $11 = NZZ.NCC.
E4A1 43 43 2E    6 44 
E4A4 CE          6 45 DEFB    $80+'N'
E4A5 5A 5A 2E 4E 6 46 DEFM    "ZZ.NCC.POPEP.M."           ; String $12 = NZZ.NCC.POPEP.M.
E4A9 43 43 2E 50 6 46 
E4AD 4F 50 45 50 6 46 
E4B1 2E 4D 2E    6 46 
E4B4 B0          6 47 DEFB    $80+'0'
E4B5 30 30 38 31 6 48 DEFM    "008162432404856"           ; String $13 = 0008101820283038
E4B9 36 32 34 33 6 48 
E4BD 32 34 30 34 6 48 
E4C1 38 35 36    6 48 
E4C4 B0          6 49 DEFB    $80+'0'
E4C5 31 32 33 34 6 50 DEFM    "1234567"                   ; String $14 = 01234567
E4C9 35 36 37    6 50 
E4CC A8          6 51 DEFB    $80+'('
E4CD 48 4C 29    6 52 DEFM    "HL)"                       ; String $15 = (HL)
E4D0 A8          6 53 DEFB    $80+'('
E4D1 49 58 2B    6 54 DEFM    "IX+"                       ; String $16 = (IX+
E4D4 A8          6 55 DEFB    $80+'('
E4D5 49 59 2B    6 56 DEFM    "IY+"                       ; String $17 = (IY+
E4D8 C8 4C       6 57 DEFB    $80+'H','L'                 ; String $18 = HL
E4DA C9 58       6 58 DEFB    $80+'I','X'                 ; String $19 = IX
E4DC C9 59       6 59 DEFB    $80+'I','Y'                 ; String $1A = IY
E4DE CA 52       6 60 DEFB    $80+'J','R'                 ; String $1B = JR
E4E0 C4          6 61 DEFB    $80+'D'
E4E1 4A 4E 5A    6 62 DEFM    "JNZ"                       ; String $1C = DJNZ
E4E4 D2          6 63 DEFB    $80+'R'
E4E5 53 54       6 64 DEFM    "ST"                        ; String $1D = RST
E4E7 CA 50       6 65 DEFB    $80+'J','P'                 ; String $1E = JP
E4E9 C3          6 66 DEFB    $80+'C'
E4EA 41 4C 4C    6 67 DEFM    "ALL"                       ; String $1F = CALL
E4ED D2          6 68 DEFB    $80+'R'
E4EE 45 54       6 69 DEFM    "ET"                        ; String $20 = RET
E4F0 D2          6 70 DEFB    $80+'R'
E4F1 45 54 49    6 71 DEFM    "ETI"                       ; String $21 = RETI
E4F4 D2          6 72 DEFB    $80+'R'
E4F5 45 54 4E    6 73 DEFM    "ETN"                       ; String $22 = RETN
E4F8 C1          6 74 DEFB    $80+'A'                     ; String $23 = A
E4F9 A8          6 75 DEFB    $80+'('
E4FA 53 50 29    6 76 DEFM    "SP)"                       ; String $24 = (SP)
E4FD C1 46       6 77 DEFB    $80+'A','F'                 ; String $25 = AF
E4FF C4 45       6 78 DEFB    $80+'D','E'                 ; String $26 = DE
E501 B0          6 79 DEFB    $80+'0'                     ; String $27 = 0
E502 B1          6 80 DEFB    $80+'1'                     ; String $28 = 1
E503 B2          6 81 DEFB    $80+'2'                     ; String $29 = 2
E504 A8          6 82 DEFB    $80+'('
E505 42 43 29    6 83 DEFM    "BC)"                       ; String $2A = (BC)
E508 A8          6 84 DEFB    $80+'('
E509 44 45 29    6 85 DEFM    "DE)"                       ; String $2B = (DE)
E50C D3 50       6 86 DEFB    $80+'S','P'                 ; String $2C = SP
E50E C9          6 87 DEFB    $80+'I'                     ; String $2D = I
E50F D2          6 88 DEFB    $80+'R'                     ; String $2E = R
E510 A8          6 89 DEFB    $80+'('
E511 43 29       6 90 DEFM    "C)"                        ; String $2F = (C)
E513 C1          6 91 DEFB    $80+'A'
E514 46 27       6 92 DEFM    "F'"                        ; String $30 = AF'
E516 C1          6 93 DEFB    $80+'A'
E517 44 43       6 94 DEFM    "DC"                        ; String $31 = ADC
E519 C1          6 95 DEFB    $80+'A'
E51A 44 44       6 96 DEFM    "DD"                        ; String $32 = ADD
E51C C1          6 97 DEFB    $80+'A'
E51D 4E 44       6 98 DEFM    "ND"                        ; String $33 = AND
E51F C2          6 99 DEFB    $80+'B'
E520 49 54       6 100 DEFM    "IT"                        ; String $34 = BIT
E522 C3          6 101 DEFB    $80+'C'
E523 43 46       6 102 DEFM    "CF"                        ; String $35 = CCF
E525 C3          6 103 DEFB    $80+'C'
E526 50          6 104 DEFM    "P"                         ; String $36 = CP
E527 C3          6 105 DEFB    $80+'C'
E528 50 44       6 106 DEFM    "PD"                        ; String $37 = CPD
E52A C3          6 107 DEFB    $80+'C'
E52B 50 44 52    6 108 DEFM    "PDR"                       ; String $38 = CPDR
E52E C3          6 109 DEFB    $80+'C'
E52F 50 49       6 110 DEFM    "PI"                        ; String $39 = CPI
E531 C3          6 111 DEFB    $80+'C'
E532 50 49 52    6 112 DEFM    "PIR"                       ; String $3A = CPIR
E535 C3          6 113 DEFB    $80+'C'
E536 50 4C       6 114 DEFM    "PL"                        ; String $3B = CPL
E538 C4          6 115 DEFB    $80+'D'
E539 41 41       6 116 DEFM    "AA"                        ; String $3C = DAA
E53B C4          6 117 DEFB    $80+'D'
E53C 45 43       6 118 DEFM    "EC"                        ; String $3D = DEC
E53E C4          6 119 DEFB    $80+'D'
E53F 49          6 120 DEFM    "I"                         ; String $3E = DI
E540 C5          6 121 DEFB    $80+'E'
E541 49          6 122 DEFM    "I"                         ; String $3F = EI
E542 C5          6 123 DEFB    $80+'E'
E543 58          6 124 DEFM    "X"                         ; String $40 = EX
E544 C5          6 125 DEFB    $80+'E'
E545 58 58       6 126 DEFM    "XX"                        ; String $41 = EXX
E547 C8          6 127 DEFB    $80+'H'
E548 41 4C 54    6 128 DEFM    "ALT"                       ; String $42 = HALT
E54B C9          6 129 DEFB    $80+'I'
E54C 4D          6 130 DEFM    "M"                         ; String $43 = IM
E54D C9          6 131 DEFB    $80+'I'
E54E 4E          6 132 DEFM    "N"                         ; String $44 = IN
E54F C9          6 133 DEFB    $80+'I'
E550 4E 43       6 134 DEFM    "NC"                        ; String $45 = INC
E552 C9          6 135 DEFB    $80+'I'
E553 4E 44       6 136 DEFM    "ND"                        ; String $46 = IND
E555 C9          6 137 DEFB    $80+'I'
E556 4E 44 52    6 138 DEFM    "NDR"                       ; String $47 = INDR
E559 C9          6 139 DEFB    $80+'I'
E55A 4E 49       6 140 DEFM    "NI"                        ; String $48 = INI
E55C C9          6 141 DEFB    $80+'I'
E55D 4E 49 52    6 142 DEFM    "NIR"                       ; String $49 = INIR
E560 CC          6 143 DEFB    $80+'L'
E561 44          6 144 DEFM    "D"                         ; String $4A = LD
E562 CC          6 145 DEFB    $80+'L'
E563 44 44       6 146 DEFM    "DD"                        ; String $4B = LDD
E565 CC          6 147 DEFB    $80+'L'
E566 44 44 52    6 148 DEFM    "DDR"                       ; String $4C = LDDR
E569 CC          6 149 DEFB    $80+'L'
E56A 44 49       6 150 DEFM    "DI"                        ; String $4D = LDI
E56C CC          6 151 DEFB    $80+'L'
E56D 44 49 52    6 152 DEFM    "DIR"                       ; String $4E = LDIR
E570 CE          6 153 DEFB    $80+'N'
E571 45 47       6 154 DEFM    "EG"                        ; String $4F = NEG
E573 CE          6 155 DEFB    $80+'N'
E574 4F 50       6 156 DEFM    "OP"                        ; String $50 = NOP
E576 CF          6 157 DEFB    $80+'O'
E577 52          6 158 DEFM    "R"                         ; String $51 = OR
E578 CF          6 159 DEFB    $80+'O'
E579 54 44 52    6 160 DEFM    "TDR"                       ; String $52 = OTDR
E57C CF          6 161 DEFB    $80+'O'
E57D 54 49 52    6 162 DEFM    "TIR"                       ; String $53 = OTIR
E580 CF          6 163 DEFB    $80+'O'
E581 55 54       6 164 DEFM    "UT"                        ; String $54 = OUT
E583 CF          6 165 DEFB    $80+'O'
E584 55 54 44    6 166 DEFM    "UTD"                       ; String $55 = OUTD
E587 CF          6 167 DEFB    $80+'O'
E588 55 54 49    6 168 DEFM    "UTI"                       ; String $56 = OUTI
E58B D0          6 169 DEFB    $80+'P'
E58C 4F 50       6 170 DEFM    "OP"                        ; String $57 = POP
E58E D0          6 171 DEFB    $80+'P'
E58F 55 53 48    6 172 DEFM    "USH"                       ; String $58 = PUSH
E592 D2          6 173 DEFB    $80+'R'
E593 45 53       6 174 DEFM    "ES"                        ; String $59 = RES
E595 D2          6 175 DEFB    $80+'R'
E596 4C          6 176 DEFM    "L"                         ; String $5A = RL
E597 D2          6 177 DEFB    $80+'R'
E598 4C 41       6 178 DEFM    "LA"                        ; String $5B = RLA
E59A D2          6 179 DEFB    $80+'R'
E59B 4C 43       6 180 DEFM    "LC"                        ; String $5C = RLC
E59D D2          6 181 DEFB    $80+'R'
E59E 4C 43 41    6 182 DEFM    "LCA"                       ; String $5D = RLCA
E5A1 D2          6 183 DEFB    $80+'R'
E5A2 4C 44       6 184 DEFM    "LD"                        ; String $5E = RLD
E5A4 D2          6 185 DEFB    $80+'R'
E5A5 52          6 186 DEFM    "R"                         ; String $5F = RR
E5A6 D2          6 187 DEFB    $80+'R'
E5A7 52 41       6 188 DEFM    "RA"                        ; String $60 = RRA
E5A9 D2          6 189 DEFB    $80+'R'
E5AA 52 43       6 190 DEFM    "RC"                        ; String $61 = RRC
E5AC D2          6 191 DEFB    $80+'R'
E5AD 52 43 41    6 192 DEFM    "RCA"                       ; String $62 = RRCA
E5B0 D2          6 193 DEFB    $80+'R'
E5B1 52 44       6 194 DEFM    "RD"                        ; String $63 = RRD
E5B3 D3          6 195 DEFB    $80+'S'
E5B4 42 43       6 196 DEFM    "BC"                        ; String $64 = SBC
E5B6 D3          6 197 DEFB    $80+'S'
E5B7 43 46       6 198 DEFM    "CF"                        ; String $65 = SCF
E5B9 D3          6 199 DEFB    $80+'S'
E5BA 45 54       6 200 DEFM    "ET"                        ; String $66 = SET
E5BC D3          6 201 DEFB    $80+'S'
E5BD 4C 41       6 202 DEFM    "LA"                        ; String $67 = SLA
E5BF D3          6 203 DEFB    $80+'S'
E5C0 4C 4C       6 204 DEFM    "LL"                        ; String $68 = SLL
E5C2 D3          6 205 DEFB    $80+'S'
E5C3 52 41       6 206 DEFM    "RA"                        ; String $69 = SRA
E5C5 D3          6 207 DEFB    $80+'S'
E5C6 52 4C       6 208 DEFM    "RL"                        ; String $6A = SRL
E5C8 D3          6 209 DEFB    $80+'S'
E5C9 55 42       6 210 DEFM    "UB"                        ; String $6B = SUB
E5CB D8          6 211 DEFB    $80+'X'
E5CC 4F 52       6 212 DEFM    "OR"                        ; String $6C = XOR
E5CE BF          6 213 DEFB    $80+'?'
E5CF 3F 3F 3F    6 214 DEFM    "???"                       ; String $6D = ????
E5D2 C8          6 215 DEFB    $80+'H'                     ; String $6E = H
E5D3 C9          6 216 DEFB    $80+'I'
E5D4 58 48       6 217 DEFM    "XH"                        ; String $6F = IXH
E5D6 C9          6 218 DEFB    $80+'I'
E5D7 59 48       6 219 DEFM    "YH"                        ; String $70 = IYH
E5D9 CC          6 220 DEFB    $80+'L'                     ; String $71 = L
E5DA C9          6 221 DEFB    $80+'I'
E5DB 58 4C       6 222 DEFM    "XL"                        ; String $72 = IXL
E5DD C9          6 223 DEFB    $80+'I'
E5DE 59 4C       6 224 DEFM    "YL"                        ; String $73 = IYL
E5E0 80          6 225 DEFB    $80
E5E1             6 227 ; Instruction table: (DisInst)
E5E1             6 228 ; The instruction table definition of the processor's instruction set.
E5E1             6 229 ; Each instruction is described by 5 bytes:
E5E1             6 230 ;    Byte 0:  Opcode value
E5E1             6 231 ;    Byte 1:  Opcode mask
E5E1             6 232 ;    Byte 2:  Operation string number
E5E1             6 233 ;    Byte 3:  Operand #1 string number, plus bits 6-7 define precode
E5E1             6 234 ;    Byte 4:  Operand #2 string number
E5E1             6 235 ; The precode values code in bits 6-7 are:
E5E1             6 236 ;    00xx xxxx = No precode
E5E1             6 237 ;    10xx xxxx = Precode 0xCB
E5E1             6 238 ;    11xx xxxx = Precode 0xED
E5E1             6 239 ; Precodes are used by the processor's extended instructions
E5E1             6 240 DisInst:
E5E1 88 F8 31 23 6 241 DEFB    $88, $F8, $31, $23, $07     ; Opcode: $88 - ADC  A   ,r2
E5E5 07          6 241 
E5E6 CE FF 31 23 6 242 DEFB    $CE, $FF, $31, $23, $02     ; Opcode: $CE - ADC  A   ,n
E5EA 02          6 242 
E5EB 4A CF 31 D8 6 243 DEFB    $4A, $CF, $31, $D8, $08     ; Opcode: $4A - ADC  HL  ,dd
E5EF 08          6 243 
E5F0 80 F8 32 23 6 244 DEFB    $80, $F8, $32, $23, $07     ; Opcode: $80 - ADD  A   ,r2
E5F4 07          6 244 
E5F5 C6 FF 32 23 6 245 DEFB    $C6, $FF, $32, $23, $02     ; Opcode: $C6 - ADD  A   ,n
E5F9 02          6 245 
E5FA 09 CF 32 18 6 246 DEFB    $09, $CF, $32, $18, $08     ; Opcode: $09 - ADD  HL  ,dd
E5FE 08          6 246 
E5FF A0 F8 33 07 6 247 DEFB    $A0, $F8, $33, $07, $01     ; Opcode: $A0 - AND  r2  ,
E603 01          6 247 
E604 E6 FF 33 02 6 248 DEFB    $E6, $FF, $33, $02, $01     ; Opcode: $E6 - AND  n   ,
E608 01          6 248 
E609 40 C0 34 8D 6 249 DEFB    $40, $C0, $34, $8D, $07     ; Opcode: $40 - BIT  b   ,r2
E60D 07          6 249 
E60E C4 C7 1F 0B 6 250 DEFB    $C4, $C7, $1F, $0B, $04     ; Opcode: $C4 - CALL cc  ,nn
E612 04          6 250 
E613 CD FF 1F 04 6 251 DEFB    $CD, $FF, $1F, $04, $01     ; Opcode: $CD - CALL nn  ,
E617 01          6 251 
E618 3F FF 35 01 6 252 DEFB    $3F, $FF, $35, $01, $01     ; Opcode: $3F - CCF      ,
E61C 01          6 252 
E61D B8 F8 36 07 6 253 DEFB    $B8, $F8, $36, $07, $01     ; Opcode: $B8 - CP   r2  ,
E621 01          6 253 
E622 FE FF 36 02 6 254 DEFB    $FE, $FF, $36, $02, $01     ; Opcode: $FE - CP   n   ,
E626 01          6 254 
E627 A9 FF 37 C1 6 255 DEFB    $A9, $FF, $37, $C1, $01     ; Opcode: $A9 - CPD      ,
E62B 01          6 255 
E62C B9 FF 38 C1 6 256 DEFB    $B9, $FF, $38, $C1, $01     ; Opcode: $B9 - CPDR     ,
E630 01          6 256 
E631 A1 FF 39 C1 6 257 DEFB    $A1, $FF, $39, $C1, $01     ; Opcode: $A1 - CPI      ,
E635 01          6 257 
E636 B1 FF 3A C1 6 258 DEFB    $B1, $FF, $3A, $C1, $01     ; Opcode: $B1 - CPIR     ,
E63A 01          6 258 
E63B 2F FF 3B 01 6 259 DEFB    $2F, $FF, $3B, $01, $01     ; Opcode: $2F - CPL      ,
E63F 01          6 259 
E640 27 FF 3C 01 6 260 DEFB    $27, $FF, $3C, $01, $01     ; Opcode: $27 - DAA      ,
E644 01          6 260 
E645 0B CF 3D 08 6 261 DEFB    $0B, $CF, $3D, $08, $01     ; Opcode: $0B - DEC  dd  ,
E649 01          6 261 
E64A 05 C7 3D 06 6 262 DEFB    $05, $C7, $3D, $06, $01     ; Opcode: $05 - DEC  r   ,
E64E 01          6 262 
E64F F3 FF 3E 01 6 263 DEFB    $F3, $FF, $3E, $01, $01     ; Opcode: $F3 - DI       ,
E653 01          6 263 
E654 10 FF 1C 02 6 264 DEFB    $10, $FF, $1C, $02, $01     ; Opcode: $10 - DJNZ n   ,
E658 01          6 264 
E659 FB FF 3F 01 6 265 DEFB    $FB, $FF, $3F, $01, $01     ; Opcode: $FB - EI       ,
E65D 01          6 265 
E65E E3 FF 40 24 6 266 DEFB    $E3, $FF, $40, $24, $18     ; Opcode: $E3 - EX   (SP),HL
E662 18          6 266 
E663 08 FF 40 25 6 267 DEFB    $08, $FF, $40, $25, $30     ; Opcode: $08 - EX   AF  ,AF'
E667 30          6 267 
E668 EB FF 40 26 6 268 DEFB    $EB, $FF, $40, $26, $18     ; Opcode: $EB - EX   DE  ,HL
E66C 18          6 268 
E66D D9 FF 41 01 6 269 DEFB    $D9, $FF, $41, $01, $01     ; Opcode: $D9 - EXX      ,
E671 01          6 269 
E672 76 FF 42 01 6 270 DEFB    $76, $FF, $42, $01, $01     ; Opcode: $76 - HALT     ,
E676 01          6 270 
E677 46 FF 43 E7 6 271 DEFB    $46, $FF, $43, $E7, $01     ; Opcode: $46 - IM   0   ,
E67B 01          6 271 
E67C 56 FF 43 E8 6 272 DEFB    $56, $FF, $43, $E8, $01     ; Opcode: $56 - IM   1   ,
E680 01          6 272 
E681 5E FF 43 E9 6 273 DEFB    $5E, $FF, $43, $E9, $01     ; Opcode: $5E - IM   2   ,
E685 01          6 273 
E686 40 C7 44 C6 6 274 DEFB    $40, $C7, $44, $C6, $2F     ; Opcode: $40 - IN   r   ,(C)
E68A 2F          6 274 
E68B DB FF 44 23 6 275 DEFB    $DB, $FF, $44, $23, $03     ; Opcode: $DB - IN   A   ,(n)
E68F 03          6 275 
E690 03 CF 45 08 6 276 DEFB    $03, $CF, $45, $08, $01     ; Opcode: $03 - INC  dd  ,
E694 01          6 276 
E695 04 C7 45 06 6 277 DEFB    $04, $C7, $45, $06, $01     ; Opcode: $04 - INC  r   ,
E699 01          6 277 
E69A AA FF 46 C1 6 278 DEFB    $AA, $FF, $46, $C1, $01     ; Opcode: $AA - IND      ,
E69E 01          6 278 
E69F BA FF 47 C1 6 279 DEFB    $BA, $FF, $47, $C1, $01     ; Opcode: $BA - INDR     ,
E6A3 01          6 279 
E6A4 A2 FF 48 C1 6 280 DEFB    $A2, $FF, $48, $C1, $01     ; Opcode: $A2 - INI      ,
E6A8 01          6 280 
E6A9 B2 FF 49 C1 6 281 DEFB    $B2, $FF, $49, $C1, $01     ; Opcode: $B2 - INIR     ,
E6AD 01          6 281 
E6AE E9 FF 1E 15 6 282 DEFB    $E9, $FF, $1E, $15, $01     ; Opcode: $E9 - JP   (HL),
E6B2 01          6 282 
E6B3 C2 C7 1E 0B 6 283 DEFB    $C2, $C7, $1E, $0B, $04     ; Opcode: $C2 - JP   cc  ,nn
E6B7 04          6 283 
E6B8 C3 FF 1E 04 6 284 DEFB    $C3, $FF, $1E, $04, $01     ; Opcode: $C3 - JP   nn  ,
E6BC 01          6 284 
E6BD 20 E7 1B 0A 6 285 DEFB    $20, $E7, $1B, $0A, $02     ; Opcode: $20 - JR   c   ,n
E6C1 02          6 285 
E6C2 18 FF 1B 02 6 286 DEFB    $18, $FF, $1B, $02, $01     ; Opcode: $18 - JR   n   ,
E6C6 01          6 286 
E6C7 40 C0 4A 06 6 287 DEFB    $40, $C0, $4A, $06, $07     ; Opcode: $40 - LD   r   ,r2
E6CB 07          6 287 
E6CC 02 FF 4A 2A 6 288 DEFB    $02, $FF, $4A, $2A, $23     ; Opcode: $02 - LD   (BC),A
E6D0 23          6 288 
E6D1 12 FF 4A 2B 6 289 DEFB    $12, $FF, $4A, $2B, $23     ; Opcode: $12 - LD   (DE),A
E6D5 23          6 289 
E6D6 32 FF 4A 05 6 290 DEFB    $32, $FF, $4A, $05, $23     ; Opcode: $32 - LD   (nn),A
E6DA 23          6 290 
E6DB 22 FF 4A 05 6 291 DEFB    $22, $FF, $4A, $05, $18     ; Opcode: $22 - LD   (nn),HL
E6DF 18          6 291 
E6E0 43 CF 4A C5 6 292 DEFB    $43, $CF, $4A, $C5, $08     ; Opcode: $43 - LD   (nn),dd
E6E4 08          6 292 
E6E5 0A FF 4A 23 6 293 DEFB    $0A, $FF, $4A, $23, $2A     ; Opcode: $0A - LD   A   ,(BC)
E6E9 2A          6 293 
E6EA 1A FF 4A 23 6 294 DEFB    $1A, $FF, $4A, $23, $2B     ; Opcode: $1A - LD   A   ,(DE)
E6EE 2B          6 294 
E6EF 3A FF 4A 23 6 295 DEFB    $3A, $FF, $4A, $23, $05     ; Opcode: $3A - LD   A   ,(nn)
E6F3 05          6 295 
E6F4 2A FF 4A 18 6 296 DEFB    $2A, $FF, $4A, $18, $05     ; Opcode: $2A - LD   HL  ,(nn)
E6F8 05          6 296 
E6F9 F9 FF 4A 2C 6 297 DEFB    $F9, $FF, $4A, $2C, $18     ; Opcode: $F9 - LD   SP  ,HL
E6FD 18          6 297 
E6FE 01 CF 4A 08 6 298 DEFB    $01, $CF, $4A, $08, $04     ; Opcode: $01 - LD   dd  ,nn
E702 04          6 298 
E703 4B CF 4A C8 6 299 DEFB    $4B, $CF, $4A, $C8, $05     ; Opcode: $4B - LD   dd  ,(nn)
E707 05          6 299 
E708 57 FF 4A E3 6 300 DEFB    $57, $FF, $4A, $E3, $2D     ; Opcode: $57 - LD   A   ,I
E70C 2D          6 300 
E70D 5F FF 4A E3 6 301 DEFB    $5F, $FF, $4A, $E3, $2E     ; Opcode: $5F - LD   A   ,R
E711 2E          6 301 
E712 47 FF 4A ED 6 302 DEFB    $47, $FF, $4A, $ED, $23     ; Opcode: $47 - LD   I   ,A
E716 23          6 302 
E717 4F FF 4A EE 6 303 DEFB    $4F, $FF, $4A, $EE, $23     ; Opcode: $4F - LD   R   ,A
E71B 23          6 303 
E71C 06 C7 4A 06 6 304 DEFB    $06, $C7, $4A, $06, $02     ; Opcode: $06 - LD   r   ,n
E720 02          6 304 
E721 A8 FF 4B C1 6 305 DEFB    $A8, $FF, $4B, $C1, $01     ; Opcode: $A8 - LDD      ,
E725 01          6 305 
E726 B8 FF 4C C1 6 306 DEFB    $B8, $FF, $4C, $C1, $01     ; Opcode: $B8 - LDDR     ,
E72A 01          6 306 
E72B A0 FF 4D C1 6 307 DEFB    $A0, $FF, $4D, $C1, $01     ; Opcode: $A0 - LDI      ,
E72F 01          6 307 
E730 B0 FF 4E C1 6 308 DEFB    $B0, $FF, $4E, $C1, $01     ; Opcode: $B0 - LDIR     ,
E734 01          6 308 
E735 44 FF 4F C1 6 309 DEFB    $44, $FF, $4F, $C1, $01     ; Opcode: $44 - NEG      ,
E739 01          6 309 
E73A 00 FF 50 01 6 310 DEFB    $00, $FF, $50, $01, $01     ; Opcode: $00 - NOP      ,
E73E 01          6 310 
E73F B0 F8 51 07 6 311 DEFB    $B0, $F8, $51, $07, $01     ; Opcode: $B0 - OR   r2  ,
E743 01          6 311 
E744 F6 FF 51 02 6 312 DEFB    $F6, $FF, $51, $02, $01     ; Opcode: $F6 - OR   n   ,
E748 01          6 312 
E749 BB FF 52 C1 6 313 DEFB    $BB, $FF, $52, $C1, $01     ; Opcode: $BB - OTDR     ,
E74D 01          6 313 
E74E B3 FF 53 C1 6 314 DEFB    $B3, $FF, $53, $C1, $01     ; Opcode: $B3 - OTIR     ,
E752 01          6 314 
E753 41 C7 54 EF 6 315 DEFB    $41, $C7, $54, $EF, $06     ; Opcode: $41 - OUT  (C) ,r
E757 06          6 315 
E758 D3 FF 54 03 6 316 DEFB    $D3, $FF, $54, $03, $23     ; Opcode: $D3 - OUT  (n) ,A
E75C 23          6 316 
E75D AB FF 55 C1 6 317 DEFB    $AB, $FF, $55, $C1, $01     ; Opcode: $AB - OUTD     ,
E761 01          6 317 
E762 A3 FF 56 C1 6 318 DEFB    $A3, $FF, $56, $C1, $01     ; Opcode: $A3 - OUTI     ,
E766 01          6 318 
E767 C1 CF 57 09 6 319 DEFB    $C1, $CF, $57, $09, $01     ; Opcode: $C1 - POP  qq  ,
E76B 01          6 319 
E76C C5 CF 58 09 6 320 DEFB    $C5, $CF, $58, $09, $01     ; Opcode: $C5 - PUSH qq  ,
E770 01          6 320 
E771 80 C0 59 8D 6 321 DEFB    $80, $C0, $59, $8D, $07     ; Opcode: $80 - RES  b   ,r2
E775 07          6 321 
E776 C9 FF 20 01 6 322 DEFB    $C9, $FF, $20, $01, $01     ; Opcode: $C9 - RET      ,
E77A 01          6 322 
E77B C0 C7 20 0B 6 323 DEFB    $C0, $C7, $20, $0B, $01     ; Opcode: $C0 - RET  cc  ,
E77F 01          6 323 
E780 4D FF 21 C1 6 324 DEFB    $4D, $FF, $21, $C1, $01     ; Opcode: $4D - RETI     ,
E784 01          6 324 
E785 45 FF 22 C1 6 325 DEFB    $45, $FF, $22, $C1, $01     ; Opcode: $45 - RETN     ,
E789 01          6 325 
E78A 10 F8 5A 87 6 326 DEFB    $10, $F8, $5A, $87, $01     ; Opcode: $10 - RL   r2  ,
E78E 01          6 326 
E78F 17 FF 5B 01 6 327 DEFB    $17, $FF, $5B, $01, $01     ; Opcode: $17 - RLA      ,
E793 01          6 327 
E794 00 F8 5C 87 6 328 DEFB    $00, $F8, $5C, $87, $01     ; Opcode: $00 - RLC  r2  ,
E798 01          6 328 
E799 07 FF 5D 01 6 329 DEFB    $07, $FF, $5D, $01, $01     ; Opcode: $07 - RLCA     ,
E79D 01          6 329 
E79E 6F FF 5E C1 6 330 DEFB    $6F, $FF, $5E, $C1, $01     ; Opcode: $6F - RLD      ,
E7A2 01          6 330 
E7A3 18 F8 5F 87 6 331 DEFB    $18, $F8, $5F, $87, $01     ; Opcode: $18 - RR   r2  ,
E7A7 01          6 331 
E7A8 1F FF 60 01 6 332 DEFB    $1F, $FF, $60, $01, $01     ; Opcode: $1F - RRA      ,
E7AC 01          6 332 
E7AD 08 F8 61 87 6 333 DEFB    $08, $F8, $61, $87, $01     ; Opcode: $08 - RRC  r2  ,
E7B1 01          6 333 
E7B2 0F FF 62 01 6 334 DEFB    $0F, $FF, $62, $01, $01     ; Opcode: $0F - RRCA     ,
E7B6 01          6 334 
E7B7 67 FF 63 C1 6 335 DEFB    $67, $FF, $63, $C1, $01     ; Opcode: $67 - RRD      ,
E7BB 01          6 335 
E7BC C7 C7 1D 0C 6 336 DEFB    $C7, $C7, $1D, $0C, $01     ; Opcode: $C7 - RST  t   ,
E7C0 01          6 336 
E7C1 98 F8 64 23 6 337 DEFB    $98, $F8, $64, $23, $07     ; Opcode: $98 - SBC  A   ,r2
E7C5 07          6 337 
E7C6 DE FF 64 23 6 338 DEFB    $DE, $FF, $64, $23, $02     ; Opcode: $DE - SBC  A   ,n
E7CA 02          6 338 
E7CB 42 CF 64 D8 6 339 DEFB    $42, $CF, $64, $D8, $08     ; Opcode: $42 - SBC  HL  ,dd
E7CF 08          6 339 
E7D0 37 FF 65 01 6 340 DEFB    $37, $FF, $65, $01, $01     ; Opcode: $37 - SCF      ,
E7D4 01          6 340 
E7D5 C0 C0 66 8D 6 341 DEFB    $C0, $C0, $66, $8D, $07     ; Opcode: $C0 - SET  b   ,r2
E7D9 07          6 341 
E7DA 20 F8 67 87 6 342 DEFB    $20, $F8, $67, $87, $01     ; Opcode: $20 - SLA  r2  ,
E7DE 01          6 342 
E7DF 30 F8 68 87 6 343 DEFB    $30, $F8, $68, $87, $01     ; Opcode: $30 - SLL  r2  ,
E7E3 01          6 343 
E7E4 28 F8 69 87 6 344 DEFB    $28, $F8, $69, $87, $01     ; Opcode: $28 - SRA  r2  ,
E7E8 01          6 344 
E7E9 38 F8 6A 87 6 345 DEFB    $38, $F8, $6A, $87, $01     ; Opcode: $38 - SRL  r2  ,
E7ED 01          6 345 
E7EE 90 F8 6B 07 6 346 DEFB    $90, $F8, $6B, $07, $01     ; Opcode: $90 - SUB  r2  ,
E7F2 01          6 346 
E7F3 D6 FF 6B 02 6 347 DEFB    $D6, $FF, $6B, $02, $01     ; Opcode: $D6 - SUB  n   ,
E7F7 01          6 347 
E7F8 A8 F8 6C 07 6 348 DEFB    $A8, $F8, $6C, $07, $01     ; Opcode: $A8 - XOR  r2  ,
E7FC 01          6 348 
E7FD EE FF 6C 02 6 349 DEFB    $EE, $FF, $6C, $02, $01     ; Opcode: $EE - XOR  n   ,
E801 01          6 349 
E802 00 00 6D 01 6 350 DEFB    $00, $00, $6D, $01, $01     ; Opcode: $00 - ????     ,
E806 01          6 350 
E807 00 00 6D C1 6 351 DEFB    $00, $00, $6D, $C1, $01     ; Opcode: $00 - ????     ,
E80B 01          6 351 
E80C             6 353 ; Operand table:
E80C             6 354 ;   Index into table is the operand string number 1 to 13)
E80C             6 355 ;   Contents: Substitution string number, function bits BIILMM
E80C             6 356 ;
E80C             6 357 ; Op  String  Offset  Bracket  Immediate  Substitue     subsLen  subsMask  ->  BIILMM
E80C             6 358 ;  1  =""     +0      No       No   (00)  No                n/a  n/a           000000
E80C             6 359 ;  2  ="n"    +1      No       Byte (10)  No                n/a  n/a           010000
E80C             6 360 ;  3  ="(n)"  +1      Yes      Byte (10)  No                n/a  n/a           110000
E80C             6 361 ;  4  ="nn"   +2      No       Word (11)  No                n/a  n/a           011000
E80C             6 362 ;  5  ="(nn)" +2      Yes      Word (11)  No                n/a  n/a           111000
E80C             6 363 ;  6  ="r"    +0      No       No   (00)  "BCDEHL-A"          1  0x38 (11)     000011
E80C             6 364 ;  7  ="r2"   +0      No       No   (00)  "BCDEHL-A"          1  0x07 (00)     000000
E80C             6 365 ;  8  ="dd"   +0      No       No   (00)  "BCDEHLSP"          2  0x30 (10)     000110
E80C             6 366 ;  9  ="qq"   +0      No       No   (00)  "BCDEHLAF"          2  0x30 (10)     000110
E80C             6 367 ; 10  ="c"    +0      No       No   (00)  "NZZ NCC "          2  0x18 (01)     000101
E80C             6 368 ; 11  ="cc"   +0      No       No   (00)  "NZZ NCC POPEP M "  2  0x38 (11)     000111
E80C             6 369 ; 12  ="t"    +0      No       No   (00)  "0008101820283038"  2  0x38 (11)     000111
E80C             6 370 ; 13  ="b"    +0      No       No   (00)  "01234567"          1  0x38 (11)     000011
E80C             6 371 ; Each table entry is coded with the string number plus a byte containing BIILMM bits
E80C             6 372 ; Length bit is hi for strings with two character substitutions
E80C             6 373 DisOperandTable:
E80C 00 00       6 374 DEFB    $00, $00                    ; 0b000000 ;Operand  1 = ""
E80E 00 10       6 375 DEFB    $00, $10                    ; 0b010000 ;Operand  2 = "n"
E810 00 30       6 376 DEFB    $00, $30                    ; 0b110000 ;Operand  3 = "(n)"
E812 00 18       6 377 DEFB    $00, $18                    ; 0b011000 ;Operand  4 = "nn"
E814 00 38       6 378 DEFB    $00, $38                    ; 0b111000 ;Operand  5 = "(nn)"
E816 0E 03       6 379 DEFB    $0E, $03                    ; 0b000011 ;Operand  6 = "r"
E818 0E 00       6 380 DEFB    $0E, $00                    ; 0b000000 ;Operand  7 = "r2"
E81A 0F 06       6 381 DEFB    $0F, $06                    ; 0b000110 ;Operand  8 = "dd"
E81C 10 06       6 382 DEFB    $10, $06                    ; 0b000110 ;Operand  9 = "qq"
E81E 11 05       6 383 DEFB    $11, $05                    ; 0b000101 ;Operand 10 = "c"
E820 12 07       6 384 DEFB    $12, $07                    ; 0b000111 ;Operand 11 = "cc"
E822 13 07       6 385 DEFB    $13, $07                    ; 0b000111 ;Operand 12 = "t"
E824 14 03       6 386 DEFB    $14, $03                    ; 0b000011 ;Operand 13 = "b"
E826             6 388 ; Mask table
E826             6 389 ; These are the masks used to separate token values such as register "BCDEHL-A"
E826             6 390 ; The index into the table is coded in the two mask bits from the above table.
E826             6 391 DisMaskTable:
E826 07          6 392 DEFB    $07                         ; Mask type 0
E827 18          6 393 DEFB    $18                         ; Mask type 1
E828 30          6 394 DEFB    $30                         ; Mask type 2
E829 38          6 395 DEFB    $38                         ; Mask type 3
E82A             6 398 ; **********************************************************************************************************************
E82A             6 399 ; **  Added by Antonio Luque for ZX Spectrum disASM                                                                   **
E82A             6 400 ; **********************************************************************************************************************
E82A             6 402 ; Strings
E82A 6D 6F 72 65 6 403 StrMore:            DEFM    "more?"
E82E 3F          6 403 
E82F             6 404 StrLabels:
E82F 66 72 6F 6D 6 405 DEFM    "from:"
E833 3A          6 405 
E834 20 20 74 6F 6 406 DEFM    "  to:"
E838 3A          6 406 
E839             6 408 ; Relative reallocation addresses ** MUST be below StrLabels **
E839             6 409 ; This space is reused for the string buffer and the internal stack
E839             6 410 Realloc_Addrs:
E839             6 411 kStrBuffer:
E839 20 00       6 412 DEFW    Realloc_A-START+1
E83B 23 00       6 413 DEFW    Realloc_B-START+1
E83D 26 00       6 414 DEFW    Realloc_C-START+1
E83F 2E 00       6 415 DEFW    Realloc_1-START+1
E841 33 00       6 416 DEFW    Realloc_2-START+1
E843 36 00       6 417 DEFW    Realloc_3-START+1
E845 49 00       6 418 DEFW    Realloc_4-START+1
E847 E0 00       6 419 DEFW    Realloc_5-START+1
E849 01 01       6 420 DEFW    Realloc_6-START+1
E84B 13 01       6 421 DEFW    Realloc_7-START+1
E84D 1E 01       6 422 DEFW    Realloc_8-START+1
E84F 30 01       6 423 DEFW    Realloc_9-START+1
E851 5B 01       6 424 DEFW    Realloc_10-START+1
E853 65 01       6 425 DEFW    Realloc_11-START+1
E855 72 01       6 426 DEFW    Realloc_12-START+1
E857 88 01       6 427 DEFW    Realloc_13-START+1
E859 8D 01       6 428 DEFW    Realloc_14-START+1
E85B 91 01       6 429 DEFW    Realloc_15-START+1
E85D 96 01       6 430 DEFW    Realloc_16-START+1
E85F A9 01       6 431 DEFW    Realloc_17-START+1
E861 BB 01       6 432 DEFW    Realloc_18-START+1
E863 C4 01       6 433 DEFW    Realloc_19-START+1
E865 C9 01       6 434 DEFW    Realloc_20-START+1
E867 CC 01       6 435 DEFW    Realloc_21-START+1
E869 D6 01       6 436 DEFW    Realloc_22-START+1
E86B D9 01       6 437 DEFW    Realloc_23-START+1
E86D DD 01       6 438 DEFW    Realloc_24-START+1
E86F E6 01       6 439 DEFW    Realloc_25-START+1
E871 F1 01       6 440 DEFW    Realloc_26-START+1
E873 0C 02       6 441 DEFW    Realloc_27-START+1
E875 0F 02       6 442 DEFW    Realloc_28-START+1
E877 40 02       6 443 DEFW    Realloc_29-START+1
E879 46 02       6 444 DEFW    Realloc_30-START+1
E87B 51 02       6 445 DEFW    Realloc_31-START+1
E87D 62 02       6 446 DEFW    Realloc_32-START+2          ; ld ix,nn
E87F 66 02       6 447 DEFW    Realloc_33-START+2          ; ld (nn),de
E881 69 02       6 448 DEFW    Realloc_34-START+1
E883 6D 02       6 449 DEFW    Realloc_35-START+1
E885 70 02       6 450 DEFW    Realloc_36-START+1
E887 79 02       6 451 DEFW    Realloc_37-START+1
E889 7F 02       6 452 DEFW    Realloc_38-START+1
E88B 84 02       6 453 DEFW    Realloc_39-START+1
E88D 89 02       6 454 DEFW    Realloc_40-START+1
E88F 8D 02       6 455 DEFW    Realloc_41-START+1
E891 9B 02       6 456 DEFW    Realloc_42-START+1
E893 C1 02       6 457 DEFW    Realloc_43-START+1
E895 C5 02       6 458 DEFW    Realloc_44-START+1
E897 F6 02       6 459 DEFW    Realloc_45-START+1
E899 FA 02       6 460 DEFW    Realloc_46-START+1
E89B FF 02       6 461 DEFW    Realloc_47-START+1
E89D 06 03       6 462 DEFW    Realloc_48-START+1
E89F 11 03       6 463 DEFW    Realloc_49-START+1
E8A1 18 03       6 464 DEFW    Realloc_50-START+1
E8A3 24 03       6 465 DEFW    Realloc_51-START+1
E8A5 2A 03       6 466 DEFW    Realloc_52-START+1
E8A7 40 03       6 467 DEFW    Realloc_53-START+1
E8A9 43 03       6 468 DEFW    Realloc_54-START+1
E8AB 48 03       6 469 DEFW    Realloc_55-START+1
E8AD 61 03       6 470 DEFW    Realloc_56-START+1
E8AF 00          6 471 DEFB    $00
E8B0 00          6 472 END                 DEFB    $00                         ; The stack begins here
