; **********************************************************************************************************************
; **  String support                                                                            by Stephen C Cousins  **
; **                                                                                                                  **
; **  Adapted for ZX Spectrum disASM                                                                by Antonio Luque  **
; **********************************************************************************************************************


; String: Write hex word to string buffer
;   On entry: DE = Hex word
;   On exit:  B DE HL IX IY I AF' BC' DE' HL' preserved
StrWrHexWord:
                    ld      a, d                        ; Get hi byte
Realloc_7           call    StrWrHexByte-START          ; Write as two hex digits
                    ld      a, e                        ; Get lo byte
; String: Write hex byte to string buffer
;   On entry: A = Hex byte
;   On exit:  B DE HL IX IY I AF' BC' DE' HL' preserved
StrWrHexByte:
                    ld      c, a                        ; Save byte to convert
                    rra                                 ; Shift top nibble to
                    rra                                 ;  botom four bits..
                    rra
                    rra
                    and     %00001111                   ; Mask off unwanted bits
Realloc_8           call    StrWrHexNibble-START        ; Write top nibble
                    ld      a, c                        ; Restore byte to convert
                    and     %00001111                   ; Mask off unwanted bits
; String: Write hex nibble to string buffer
;   On entry: A = Hex nibble
;   On exit:  BC DE HL IX IY I AF' BC' DE' HL' preserved
; https://wikiti.brandonw.net/index.php?title=Z80_Optimization#DAA_trick
StrWrHexNibble:
                    cp      10                          ; if (nibble < 10) then (carry = on)
                    ccf                                 ; invert carry
                    adc     a, '0'                      ; A = nibble + ('0' or '1')
                    daa                                 ; convert nibble to ASCII
; String: Write character
;   On entry: A = Character to write to string buffer
;   On exit:  BC DE HL IX IY I AF' BC' DE' HL' preserved
; The specified character is writted to the string buffer and a null
; terminator added.
StrWrChar:
                    push    hl                          ; Store HL register
iStrStart:
                    ld      hl, $0000                   ; HL points to current empty position of the string
                    ld      (hl), a                     ; Store character at string position
                    inc     hl                          ; Move HL to next empty position
Realloc_9           ld      (iStrStart-START+1), hl     ; Update pointer to current empty position
                    pop     hl                          ; Restore HL register
                    ret
